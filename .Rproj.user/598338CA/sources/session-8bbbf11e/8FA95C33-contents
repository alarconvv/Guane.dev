#

#Libraries
library(shiny)
library(bslib)
library(fresh)
library(rhandsontable)
library(shinyWidgets)
library(bslib)
library(shinydashboard)
library(phytools)
library(ape)
library(diversitree)
library(shinyjqui)
library(shinyjs)
library(sortable)





## Functions
#' Insert the shinydashboard AdminLTE CSS
#'
#' Source:
#'
#' @importFrom shiny HTML
#' @export


is.nexus<- function(x){
  pathDiver <- file(description = x,open = "r")
  first_lineDiver <- readLines(pathDiver,n = 2)
  findNexusDiver <- grep(pattern = '#NEXUS|#Nexus|#nexus',x = first_lineDiver )
  close(pathDiver)
  if (length(findNexusDiver) == 1){
    return(TRUE)
  }else{return(FALSE)}
}

### Getnodes from tips to recalibrate
getNodes <- function(tree,colTips){
  nodetocal <- NULL
  todelete <- which(colTips == "")
  if (!length(todelete) == 0){
    nodeVector <- colTips[-todelete]
    nodetocal <- c(nodetocal, findMRCA(tree, nodeVector[3:length(nodeVector)]))
  }else{
    nodetocal <- c(nodetocal, findMRCA(tree, tips = colTips[3:length(colTips)]))
  }
  return(nodetocal)
}

#Function messages
#Modified from https://gitlab.com/hedsnz/hedsnz-public/-/blob/main/r/ggplot-shiny-messages.R
messageCatch <- function(objectReact){
  
  # try to print x() -- this generates messages if any are produced
  # define global lists for messages,
  # warnings and errors
  msg_list <-err_list <- wrn_list <- list() 
  
  # define global counters for messages,
  # warnings and errors
  err_num <- wrn_num <- msg_num <- 1
  all_msgs <- NULL
  
  
  value <- tryCatch(objectReact,
                    warning = function(w) {
                      if (w$message == "") {
                        return(NULL)
                      } else {
                        wrn_time <- paste0(Sys.time())
                        wrn_list[[wrn_time]] <<- paste0("Warning ", wrn_num, ": ", w$message)
                        wrn_num <<- wrn_num + 1
                        all_msgs <<- c(wrn_list,err_list)
                        return(all_msgs[rev(order(as.POSIXct(names(all_msgs))))])
                      }
                      
                    }, error = function(e) {
                      if (e$message == "") {
                        return(NULL)
                      } else {
                        err_time <- paste0(Sys.time())
                        err_list[[err_time]] <<- paste0("Error ", err_num, ": ", e$message)
                        err_num <<- err_num + 1
                        all_msgs <<- c(wrn_list,err_list)
                        return(all_msgs[rev(order(as.POSIXct(names(all_msgs))))])
                      }
                    },
                    msg = function(m) {
                      if (m$message == "") {
                        return(NULL)
                      } else {
                        msg_time <- paste0(Sys.time())
                        msg_list[[msg_time]] <<- paste0("msg", msg_num, ": ", m$message)
                        msg_num <<- msg_num + 1
                        all_msgs <<- c(wrn_list,err_list)
                        return(all_msgs[rev(order(as.POSIXct(names(all_msgs))))])
                      }
                      
                    }
                    
  )
  
  
  errorlist <- list(value= value, errorMessage= all_msgs)
  
  if(is.null(all_msgs)){
    return("No errors")
  }else{
    return(print(errorlist$errorMessage))
  }
  
}


#
#________________________________________________________________________________________________________________________________________________________________
#




#Defining theme

# #using a temporary file but use the path you want
# tmp <- file.path(fsep = '', "custom-theme.css")
# 
# # Create the new theme
# create_theme(
#   theme = "flatly",
#   bs_vars_color(
#     brand_primary = "#0a6f7e",
#     brand_success = "#dcd5d3",
#     brand_info = "#57a59c",
#     brand_warning = "#d1ab75",
#     brand_danger = "#d175b8"
# 
#   ),
#   bs_vars_navbar(
#     default_bg = "#0d5368",
#     default_color = "#FFFFFF",
#     default_border = NULL,
#     default_link_color = "#FFFFFF",
#     default_link_active_color = "#FFFFFF",
#     default_link_active_bg= "#0a6f7e",
#     default_link_hover_bg = "#0a6f7e",
#     default_link_hover_color= "#FFFFFF"
#   ),
#   output_file = tmp
# )


theme <- bs_theme(version = 5,bootswatch = "flatly", "form-group-margin-bottom"= "0.2rem", 
                   "enable-rounded" = T)%>% bs_add_rules( 
                    ".navbar.navbar-default {
  background-color: #0d5368 !important;
  --bs-navbar-brand-margin-end: 0rem;}
  
  
 .form-label, .shiny-input-container .control-label {
    margin-bottom: .5rem;
    margin-top: 0.5rem;
 }



.navbar-nav{
--bs-nav-link-hover-color: #88acb7;
}


.nav-tabs .nav-link.active, .nav-tabs ul.nav.navbar-nav > li > a.active, .nav-tabs > li > a.active, .nav-tabs .nav-pills > li > a.active, .nav-tabs .nav-link.active:focus, .nav-tabs .nav-link.active:hover, .nav-tabs .nav-item.open .nav-link, .nav-tabs ul.nav.navbar-nav > li.open:not(.dropdown) .nav-link, .nav-tabs > li.open .nav-link, .nav-tabs .nav-pills > li.open .nav-link, .nav-tabs .nav-item.open ul.nav.navbar-nav > li > a, .nav-tabs ul.nav.navbar-nav > li.open:not(.dropdown) ul.nav.navbar-nav > li > a, .nav-tabs > li.open ul.nav.navbar-nav > li > a, .nav-tabs .nav-pills > li.open ul.nav.navbar-nav > li > a, .nav-tabs .nav-item.open .nav-tabs > li > a, .nav-tabs ul.nav.navbar-nav > li.open:not(.dropdown) .nav-tabs > li > a, .nav-tabs > li.open .nav-tabs > li > a, .nav-tabs .nav-pills > li.open .nav-tabs > li > a, .nav-tabs .nav-item.open .nav-pills > li > a, .nav-tabs ul.nav.navbar-nav > li.open:not(.dropdown) .nav-pills > li > a, .nav-tabs > li.open .nav-pills > li > a, .nav-tabs .nav-pills > li.open .nav-pills > li > a, .nav-tabs .nav-item.open .nav-link:focus, .nav-tabs .nav-item.open .nav-link:hover {
	color: #139c8b;
}

.nav-link, .nav-tabs>li>a, .nav-pills>li>a, ul.nav.navbar-nav>li>a {
    color: #fff;
}


.nav-tabs .nav-link, .nav-tabs>li>a, .nav-tabs .nav-pills>li>a, .nav-tabs ul.nav.navbar-nav>li>a{
    background: #2c3e503d;
}

.navbar:not(.fixed-bottom):not(.navbar-fixed-bottom):not(.navbar-fixed-bottom) {
    margin-bottom: 10px;
}

.nav-tabs{
margin-bottom: 10px;
}

  ")



# Define UI for application that draws a histogram

ui <-   shiny::navbarPage( title = div("", img(src = "Picture1.png", id = "simulation", height = "75px",width = "70px",style = "position: relative; margin:0px 0px; display:center-align;")),
                           
                           
                           id = "GnavbarPage",
                           selected = "Intro",
                           position = "static-top",
                           inverse = FALSE,
                           collapsible = TRUE,
                           fluid = TRUE,
                           windowTitle = "Guane",
                           theme = theme,
                           
                           ###modify adminlte
                           
                           header=  tags$style(HTML(".nav>li>a:active, .nav>li>a:focus, .nav>li>a:hover { background: #0d4d6100;}
                                          
                                          ")),
                           
                           
                           
                           
                           #Intro Panel
                           tabPanel(id= "Gintro",title =  "Intro"),
                           
                           #Collapsible Panels
                           navbarMenu(title = "Methods",menuName = "GnavbarMenu",
                                      
                                      
                                      
                                      tabPanel(id="IndCont","Independent Contrasts", 
                                               #Finish of IndCont
                                      ),
                                      "----",
                                      "Ancestral State Reconstruction",
                                      
                                      tabPanel(id="DisChar","Discrete characters",
                                               tabsetPanel(id="TabsDisChar",type="tabs",
                                                           tabPanel(id="DisCharDT",title = "DATA",
                                                                    useShinyjs(),
                                                                    div(
                                                                      id = "DisCharDTReset",
                                                                      
                                                                      fluidRow(column(10, fluidRow(column(3, card(
                                                                        card_header( strong("Setting up")),
                                                                        selectInput("tree", "Load tree",c("Select" = "select","Example" = "examp","Import tree" = "treeFile")),
                                                                        conditionalPanel(condition = "input.tree=='treeFile'",
                                                                                         # selectInput("format", "Tree format",c("Select" = "select","Nexus" = "Nexus","Newick" = "Newick")),
                                                                                         fileInput("fileTree", "Load file")),
                                                                        actionButton("importTree", "Import tree"), hr(),
                                                                        selectInput("csvData", "Load csv", c("Select" = "select", "Example" = "exampCSV", "Import data" = "DataFile")),
                                                                        conditionalPanel(condition = "input.csvData == 'DataFile'",
                                                                                         fileInput("fileCSV", "Load file")),
                                                                        actionButton("importCSV", "Import csv"), hr(),
                                                                        checkboxInput("checknames", "Check tree & data names"),
                                                                        selectInput('dataVar','Select a character',choices = 'Select', selected = NULL),
                                                                        selectInput('typeChar', 'Confirm character type', choices = c('Select','Discrete','Continuous'), selected = 'Select'), hr(),
                                                                        numericInput(inputId = "seed", label = "Set seed",value =  999, min = 1, max = 1000000)
                                                                        )),
                                                                        column(5,useShinydashboard( ),#setBackgroundColor(color = "ghostwhite"),
                                                                               jqui_resizable(box(style='width:100%;overflow-x: scroll;height:100%;overflow-y: scroll;',
                                                                                                  plotOutput(outputId = 'PhyloPlot', inline = T),width = 12, status = "info",height = "100%"))),
                                                                        column(4,useShinydashboard(),#setBackgroundColor(color = "ghostwhite"),
                                                                               tags$style(type='text/css', '#strDisCharDT {background-color: rgba(0,0,0,0);}'),
                                                                               box(strong('Data structure'),hr(),verbatimTextOutput("strDisCharDT"),width = 12, status = "success",height = "100%"))),
                                                                        fluidRow(column(3,card(card_header( strong("Download")),
                                                                                                             fileInput(inputId = "fileTreeDisCharDT2",label = 'Load file',width = "100%"))),
                                                                                               column(5,tags$style(type='text/css', '#outputDisCharDT {background-color: rgba(0,0,0,0);}'),
                                                                                                      box( strong('Output'),hr(),verbatimTextOutput('outputDisCharDT'), status = "warning",width = 12,height = "100%")),
                                                                                               column(4,tags$style(type='text/css', '#messDisCharDT {background-color: rgba(0,0,0,0);}'),
                                                                                                      box(strong('Warning/Error'),hr(),verbatimTextOutput('messDisCharDT'),status = "danger",width = 12,height = "100%")))),
                                                                               column(2, card(card_header( strong("Graphic Controls")),
                                                                                 checkboxInput("tipLabels", "Tip labels"),
                                                                                              conditionalPanel(condition = "input.tipLabels==1",
                                                                                                               sliderInput("tipSize", "Tip label size",step = 0.1,min = 0, max = 3, value = 0.5)),
                                                                                              checkboxInput("branchLength", "Edge length"),
                                                                                              sliderInput("PlotWidthDt", "Tree width (px)",step = 100,min = 100, max = 1000, value = 400),
                                                                                              sliderInput("PlotHeightDt", "Tree height (px)",step = 100,min = 100, max = 1000, value = 800),
                                                                                              selectInput("plotType", "Tree type",
                                                                                                          c("Phylogram" = "phylogram", 
                                                                                                            "Cladogram" = "cladogram", 
                                                                                                            "Fan" = "fan", 
                                                                                                            "Unrooted" = "unrooted", 
                                                                                                            "Radial" = "radial",
                                                                                                            "tidy" = "Tidy" ), selected = "phylogram")))
                                                                               
                                                                               )
                                                                      # Finish div DisCharDTReset
                                                                      )
                                                                    
                                                                   # finish DisCharDT
                                                                     ),
                                                           tabPanel(id= "DisCharANA", title = "Analysis",
                                                                    
                                                                    
                                                                    #Finish DisCharANA
                                                                    )
                                                           #Finish TabsDischar
                                                           )),
                                      
                                      ### ----------------------------------------------LTT : DATA PANEL---------------------------------------------------------
                                      
                                      tabPanel(id="ContChr","Continuous Characters"),
                                      "----",
                                      "Basic Diversification Analyses",
                                      tabPanel(id="LTT","Lineages Throught the time",
                                               
                                               tabsetPanel(id="TabslttDT",type="tabs",
                                                           tabPanel(id="lttDT",title = "DATA",
                                                                    useShinyjs(),
                                                                    div(
                                                                      id = "lttDTReset",
                                                                      
                                                                      fluidRow(column(10, fluidRow(column(3,card(
                                                                        card_header( strong("Setting up")),
                                                                        fileInput(inputId = "fileTreelttDT",label = strong('Load file'),width = "100%",accept = c(".tree",".tre",".nexus")),
                                                                        fluidRow(column(6,aling="center",
                                                                                        materialSwitch(inputId = "ExamplttDT",label = "Use example",
                                                                                                       value = FALSE,status = "info",right = TRUE)),
                                                                                 column(6,align= "right",actionButton(inputId = "importTreelttDT",label = NULL,icon =icon(name = "upload"), width = "20%"))),
                                                                        hr(),
                                                                        actionButton(inputId = "ultrlttDT",label = "Is it ultrametric?",width = "100%"),
                                                                        tags$script("$(\"input:radio[name='sent'][value='-2']\").parent().css('background-color', '#DE6B63');"),
                                                                        uiOutput("forceultrlttDT"),
                                                                        conditionalPanel(condition = "input.frcUltButtlttDT  == 'chronoslttDT'",
                                                                                         # Load  csv by nodes
                                                                                         strong("Include ages"),
                                                                                         checkboxInput(inputId = 'timeCSVlttDT', label = 'Load .csv age by nodes'),
                                                                                         conditionalPanel(condition = "input.timeCSVlttDT == 1",
                                                                                                          fileInput("fileagelttDT", "Load file"),
                                                                                                          actionButton("importAgeCSVlttDT", "Import .csv")
                                                                                         ),
                                                                                         #Load csv by tips
                                                                                         checkboxInput(inputId = 'CSVbytipslttDT', label = 'Load .csv age by tips'),
                                                                                         conditionalPanel(condition = "input.CSVbytipslttDT == 1",
                                                                                                          fileInput("filebytipslttDT", "Load file"),
                                                                                                          actionButton("importbytipsCSVlttDT", "Import .csv")
                                                                                         ), strong("Calibration paramters"),
                                                                                         
                                                                                         textInput(width = "100%",inputId = 'lambdaChronoslttDT',label = "Lambda",value = '1'),
                                                                                         selectInput(width = "100%", inputId = "ModelsCallttDT" ,label = "Models" ,
                                                                                                     choices = c("correlated", "relaxed", "discrete","clock"),selected = "correlated",multiple = F),
                                                                                         conditionalPanel(condition = "input.ModelsCallttDT =='discrete'",
                                                                                                          textInput(width = "100%",inputId = 'nbratecallttDT',label = "Choose nb.rate.cat < 1",value = '10')
                                                                                         ),
                                                                                         strong("Optimization controls"),
                                                                                         selectInput(inputId = "ControlCallttDT", label = NULL ,choices = c("default", "Customize") ,selected = "default",multiple = F),
                                                                                         conditionalPanel("input.ControlCallttDT == 'Customize' ",
                                                                                                          textInput(width = "100%",inputId = 'tolCallttDT',label = "tolerance",value = '1e-8'),
                                                                                                          textInput(width = "100%",inputId = 'itermaxCallttDT',label = "iter.max",value = '1e4'),
                                                                                                          textInput(width = "100%",inputId = 'evalmaxCallttDT',label = "eval.max",value = '1e4'),
                                                                                                          textInput(width = "100%",inputId = 'dualiterCallttDT',label = "dial.iter.max",value = '20'),
                                                                                                          textInput(width = "100%",inputId = 'epsiCallttDT',label = "epsilon",value = '1e-6'),
                                                                                         )
                                                                                         
                                                                        ),
                                                                        conditionalPanel(condition = "input.frcUltButtlttDT  == 'roundlttDT'",
                                                                                         selectInput(inputId ="methodRoundlttDT",label = 'Rounding method', choices = c("nnls","extend"),selected = "nnls",multiple = F)
                                                                        ),
                                                                        uiOutput("RunUltrlttDT"),
                                                                        
                                                                        
                                                                        
                                                                        hr(),
                                                                        actionButton(inputId = "BinarylttDT",label = "Is it binary?",width = "100%"),
                                                                        uiOutput("PolilttDT"),
                                                                        uiOutput("PolytlttDT")
                                                                      )),
                                                                                                   column(5,useShinydashboard( ),#setBackgroundColor(color = "ghostwhite"),
                                                                                                          jqui_resizable(box(style='width:100%;overflow-x: scroll;height:100%;overflow-y: scroll;',
                                                                                                                             plotOutput(outputId = "phylolttDT"),width = 12, status = "info",height = "100%"))),
                                                                                                   column(4,useShinydashboard(),#setBackgroundColor(color = "ghostwhite"),
                                                                                                          tags$style(type='text/css', '#strlttDT {background-color: rgba(0,0,0,0);}'),
                                                                                                          box(strong('Data structure'),hr(),verbatimTextOutput("strlttDT"),width = 12, status = "success",height = "100%"))
                                                                                                   ),
                                                                                      fluidRow(column(3,card(card_header( strong("Download")),
                                                                                                             fileInput(inputId = "fileTreelttDT2",label = 'Load file',width = "100%"))),
                                                                                               column(5,tags$style(type='text/css', '#outputlttDT {background-color: rgba(0,0,0,0);}'),
                                                                                                      box( strong('Output'),hr(),verbatimTextOutput('outputlttDT'), status = "warning",width = 12,height = "100%")),
                                                                                               column(4,tags$style(type='text/css', '#messlttDT {background-color: rgba(0,0,0,0);}'),
                                                                                                      box(strong('Warning/Error'),hr(),verbatimTextOutput('messlttDT'),status = "danger",width = 12,height = "100%"))
                                                                                               )
                                                                                      ),
                                                                      column(2,card( card_header( strong("Graphic controls")),
                                                                                     sliderInput("widthlttDT", "Tree Width:",
                                                                                                 min = 0, max = 100000, value = 500),
                                                                                     sliderInput("heightlttDT", "Tree Height:",
                                                                                                 min = 0, max = 100000, value = 500,),
                                                                                     prettyRadioButtons(selected = NULL,
                                                                                                        inputId = "sortTreelttDT",
                                                                                                        label = "Sort tree", 
                                                                                                        choices = c("Nornal", "Ascending", "Descending"),
                                                                                                        status = "info",
                                                                                                        inline = TRUE, 
                                                                                                        icon = icon("check"), 
                                                                                     )
                                                                      ))
                                                                               ),
                                                                      
                                                                      # finish div
                                                                      ),
                                                                    
                                                                    dropdown(
                                                                      style = 'stretch',
                                                                      strong("Process controls"),br(),
                                                                      actionButton(inputId = "ButtonResetlttDT",label = "Reset initial values",width = "100%") ,br(),
                                                                      actionButton(inputId = "ButtonStoplttDT",label = "Stop process",width = "100%"),
                                                                      status = "success",
                                                                      icon = icon("gear"), width = "300px"
                                                                    )
                                                                    # Finish lttDT
                                                           ),
                                                           
                                                           
                                                           ### ----------------------------------------------LTT Analyses : ANALYSIS PANEL---------------------------------------------------------
                                                           tabPanel(id="lttANA",title = "ANALYSES",
                                                                    useShinyjs(),
                                                                    div(
                                                                      id = "lttANAReset",
                                                                      fluidRow(column(10,fluidRow(column(3,card(
                                                                        card_header( strong("Setting up the analysis")),
                                                                        actionButton(inputId = "loadDatalttANA",label = "Load/Refresh data" ,width = "100%"),hr(),
                                                                        
                                                                        checkboxInput('dropExtinctlttANA', 'Drop extinct tips',FALSE ),
                                                                        
                                                                        checkboxInput('GammaPybuslttANA', 'compute γ (Pybus & Harvey, 2000)', FALSE ),hr(),
                                                                        strong("Estimate Lineages Through the Time"),
                                                                        actionButton("runlttANA", "Run LTT",width = "30%"), hr(),
                                                                        strong('Monte Carlo constant Rate test'),
                                                                        textInput(inputId = 'RhoMCCRlttANA', 'Rho: Sampling fraction', '0.9'),
                                                                        textInput(inputId = 'nsimMCCRlttANA', 'nsim', '1000'),
                                                                        actionButton("runMCCRlttANA", "Run MCCR",width = "30%")
                                                                      )),
                                                                      column(5,jqui_resizable(box(style='width:100%;overflow-x: scroll;height:100%;overflow-y: scroll;',
                                                                                                  plotOutput(outputId = "phylottANA"),width = 12, status = "info",height = "100%"))),
                                                                      column(4,fluidRow(column(12,box(plotOutput(outputId = "PlotlttANA"),width = 12, status = "success",height = "100%"))),
                                                                             fluidRow(column(12,box(plotOutput("plotMCCRlttANA"),width = 12, status = "success",height = "100%"))))),
                                                                      fluidRow(column(3,card(card_header( strong("Download")),
                                                                                             fileInput(inputId = "fileTreelttANA2",label = 'Load file',width = "100%"))),
                                                                               column(5,tags$style(type='text/css', '#outputlttANA {background-color: rgba(0,0,0,0);}'),
                                                                                      box( strong('Output'),hr(),verbatimTextOutput('outputlttANA'), status = "warning",width = 12,height = "100%")),
                                                                               column(4,tags$style(type='text/css', '#messlttANA {background-color: rgba(0,0,0,0);}'),
                                                                                      box(strong('Warning/Error'),hr(),verbatimTextOutput('messlttANA'),status = "danger",width = 12,height = "100%")))),
                                                                      column(2,card( card_header( strong("Graphic controls")),
                                                                                     sliderInput("widthlttANA", "Tree Width:",
                                                                                                 min = 0, max = 100000, value = 500),
                                                                                     sliderInput("heightlttANA", "Tree Height:",
                                                                                                 min = 0, max = 100000, value = 500,),
                                                                                     prettyRadioButtons(selected = NULL,
                                                                                                        inputId = "sortTreelttANA",
                                                                                                        label = "Sort tree", 
                                                                                                        choices = c("Nornal", "Ascending", "Descending"),
                                                                                                        status = "info",
                                                                                                        inline = TRUE, 
                                                                                                        icon = icon("check"), 
                                                                                                        
                                                                                     ),
                                                                                     checkboxInput('logLineages', 'plot on log-linear', FALSE ),
                                                                      ))
                                                                      )
                                                                      #finish div DiverModDTReset
                                                                    ),
                                                                    dropdown(
                                                                      style = 'stretch',
                                                                      strong("Process controls"),br(),
                                                                      actionButton(inputId = "ButtonResetlttANA",label = "Reset initial values",width = "100%") ,br(),
                                                                      actionButton(inputId = "ButtonStoplttANA",label = "Stop process",width = "100%"),
                                                                      status = "success",
                                                                      icon = icon("gear"), width = "300px"
                                                                    )
                                                                    # Finish of lttANA
                                                           )
                                                           # FinishTabslttDT         
                                               )
                                               # finish LTT         
                                      ),
                                      
                                      
                                      
                                      
                                      
                                      
                                      
                                      
                                      
                                      
                                      
                                      ### ----------------------------------------------Diversification Analyses: DATA PANEL---------------------------------------------------------
                                      tabPanel(id="DiverMod","Diversification Models",
                                               tabsetPanel(id="TabsDiverMod",type="tabs",
                                                           tabPanel(id="DiverModDT",title = "DATA",
                                                                    useShinyjs(),
                                                                    div(
                                                                      id = "DiverModDTReset",
                                                                      
                                                                      fluidRow(column(10, fluidRow(column(3,card(
                                                                        card_header( strong("Setting up")),
                                                                        fileInput(inputId = "fileTreeDiverModDT",label = strong('Load file'),width = "100%",accept = c(".tree",".tre",".nexus")),
                                                                        fluidRow(column(6,aling="center",
                                                                                        materialSwitch(inputId = "ExampDiverModDT",label = "Use example",
                                                                                                       value = FALSE,status = "info",right = TRUE)),
                                                                                 column(6,align= "right",actionButton(inputId = "importTreeDiverModDT",label = NULL,icon =icon(name = "upload"), width = "20%"))),
                                                                        hr(),
                                                                        actionButton(inputId = "ultrDiverModDT",label = "Is it ultrametric?",width = "100%"),
                                                                        tags$script("$(\"input:radio[name='sent'][value='-2']\").parent().css('background-color', '#DE6B63');"),
                                                                        uiOutput("forceultrDiverModDT"),
                                                                        conditionalPanel(condition = "input.frcUltButtDiverModDT  == 'chronosDiverModDT'",
                                                                                         # Load  csv by nodes
                                                                                         strong("Include ages"),
                                                                                         checkboxInput(inputId = 'timeCSVDiverModDT', label = 'Load .csv age by nodes'),
                                                                                         conditionalPanel(condition = "input.timeCSVDiverModDT == 1",
                                                                                                          fileInput("fileageDiverModDT", "Load file"),
                                                                                                          actionButton("importAgeCSVDiverModDT", "Import .csv")
                                                                                         ),
                                                                                         #Load csv by tips
                                                                                         checkboxInput(inputId = 'CSVbytipsDiverModDT', label = 'Load .csv age by tips'),
                                                                                         conditionalPanel(condition = "input.CSVbytipsDiverModDT == 1",
                                                                                                          fileInput("filebytipsDiverModDT", "Load file"),
                                                                                                          actionButton("importbytipsCSVDiverModDT", "Import .csv")
                                                                                         ), strong("Calibration paramters"),
                                                                                         
                                                                                         textInput(width = "100%",inputId = 'lambdaChronosDiverModDT',label = "Lambda",value = '1'),
                                                                                         selectInput(width = "100%", inputId = "ModelsCalDiverModDT" ,label = "Models" ,
                                                                                                     choices = c("correlated", "relaxed", "discrete","clock"),selected = "correlated",multiple = F),
                                                                                         conditionalPanel(condition = "input.ModelsCalDiverModDT =='discrete'",
                                                                                                          textInput(width = "100%",inputId = 'nbratecalDiverModDT',label = "Choose nb.rate.cat < 1",value = '10')
                                                                                         ),
                                                                                         strong("Optimization controls"),
                                                                                         selectInput(inputId = "ControlCalDiverModDT", label = NULL ,choices = c("default", "Customize") ,selected = "default",multiple = F),
                                                                                         conditionalPanel("input.ControlCalDiverModDT == 'Customize' ",
                                                                                                          textInput(width = "100%",inputId = 'tolCalDiverModDT',label = "tolerance",value = '1e-8'),
                                                                                                          textInput(width = "100%",inputId = 'itermaxCalDiverModDT',label = "iter.max",value = '1e4'),
                                                                                                          textInput(width = "100%",inputId = 'evalmaxCalDiverModDT',label = "eval.max",value = '1e4'),
                                                                                                          textInput(width = "100%",inputId = 'dualiterCalDiverModDT',label = "dial.iter.max",value = '20'),
                                                                                                          textInput(width = "100%",inputId = 'epsiCalDiverModDT',label = "epsilon",value = '1e-6'),
                                                                                         )
                                                                                         
                                                                        ),
                                                                        conditionalPanel(condition = "input.frcUltButtDiverModDT  == 'roundDiverModDT'",
                                                                                         selectInput(inputId ="methodRoundDiverModDT",label = 'Rounding method', choices = c("nnls","extend"),selected = "nnls",multiple = F)
                                                                        ),
                                                                        
                                                                        
                                                                        uiOutput("RunUltrDiverModDT"),
                                                                        
                                                                        
                                                                        
                                                                        hr(),
                                                                        actionButton(inputId = "BinaryDiverModDT",label = "Is it binary?",width = "100%"),
                                                                        uiOutput("PoliDiverModDT"),
                                                                        uiOutput("PolytDiverDT")
                                                                      )),
                                                                                                   column(5,useShinydashboard(),#setBackgroundColor(color = "ghostwhite"),
                                                                                                          jqui_resizable(box(style='width:100%;overflow-x: scroll;height:100%;overflow-y: scroll;',
                                                                                                                             plotOutput(outputId = "phyloDiverModDT",),width = 12, status = "info",height = "100%"))),
                                                                                                   column(4,useShinydashboard(),#setBackgroundColor(color = "ghostwhite"),
                                                                                                          tags$style(type='text/css', '#strDiverModDT {background-color: rgba(0,0,0,0);}'),
                                                                                                          box(strong('Data structure'),hr(),verbatimTextOutput("strDiverModDT"),width = 12, status = "success",height = "100%")),
                                                                                                   ),
                                                                                      fluidRow(column(3,card( card_header( strong("Download")),
                                                                                                              fileInput(inputId = "fileTreeDiverModDT2",label = 'Load file',width = "100%"))),
                                                                                               column(5,tags$style(type='text/css', '#outputDiverModDT {background-color: rgba(0,0,0,0);}'),
                                                                                                      box( strong('Output'),hr(),verbatimTextOutput('outputDiverModDT'), status = "warning",width = 12,height = "100%")),
                                                                                               column(4,tags$style(type='text/css', '#messDiverModDT {background-color: rgba(0,0,0,0);}'),
                                                                                                      box(strong('Warning/Error'),hr(),verbatimTextOutput('messDiverModDT'),status = "danger",width = 12,height = "100%")))),
                                                                               column(2,card( card_header( strong("Graphic controls")),
                                                                                              sliderInput("widthDiverModDT", "Tree Width:",
                                                                                                          min = 0, max = 100000, value = 500),
                                                                                              sliderInput("heightDiverModDT", "Tree Height:",
                                                                                                          min = 0, max = 100000, value = 500,),
                                                                                              prettyRadioButtons(selected = NULL,
                                                                                                                 inputId = "sortTreeDiverModDT",
                                                                                                                 label = "Sort tree", 
                                                                                                                 choices = c("Nornal", "Ascending", "Descending"),
                                                                                                                 status = "info",
                                                                                                                 inline = TRUE, 
                                                                                                                 icon = icon("check"), 
                                                                                              )
                                                                               )))
                                                                      #finish div
                                                                    ),
                                                                    
                                                                    dropdown(
                                                                      style = 'stretch',
                                                                      strong("Process controls"),br(),
                                                                      actionButton(inputId = "ButtonResetDiverModDT",label = "Reset initial values",width = "100%")  ,br(),
                                                                      actionButton(inputId = "ButtonStopDiverModDT",label = "Stop process",width = "100%"),
                                                                      status = "success",
                                                                      icon = icon("gear"), width = "300px"
                                                                    )
                                                                    
                                                                     
                                                                    # Finish DPDivMod
                                                           ),
                                                           
                                                           ### ----------------------------------------------Diversification Analyses: DATA PANEL---------------------------------------------------------
                                                           
                                                           tabPanel(id="DiverModANA",title = "ANALYSES",
                                                                    tabsetPanel(id="PillsDiverModANA",type="pills",
                                                                                tabPanel(id="MLDiverModANA",title = "Maximum Likelihooh",
                                                                                         fluidRow(column(10, fluidRow(column(3, card(card_header( strong("Setting up")),
                                                                                                                                     actionButton(inputId = "loadDataMLDiverModANA",label = "Load/Refresh data" ,width = "100%"),hr(),
                                                                                                                                     strong("Optimization method"),
                                                                                                                                     selectInput(inputId = 'optModML',label = NULL,choices = c('subplex', 'nminb', 'nlm','optim','minqa')),
                                                                                                                                                 conditionalPanel('input.optModML == "optim"',
                                                                                                                                                                  selectInput(inputId = 'optimModML',label = 'Algorithm',choices = c('Nelder-Mead', 'BFGS', 'CG', 'L-BFGS-B'))),
                                                                                                                                                 conditionalPanel('input.optModML == "minqa"',
                                                                                                                                                                  selectInput(inputId = 'minqaModML',label = 'Algorithm',choices = c('newuoa', 'bobyqa', 'uobyqa'))),hr(),
                                                                                                                                     strong("Set diversification models"),
                                                                                                                                     
                                                                                                                                     checkboxInput(inputId = 'yuleModML',label = 'Pure Birth'),
                                                                                                                                     conditionalPanel(condition = 'input.yuleModML == 1',
                                                                                                                                                      textInput(inputId = 'fractYuleModML',label = 'Rho',value = '1.0'),
                                                                                                                                                      textInput(inputId = 'BrateYuleModML',label = 'Speciation Rate',value = '0.1'),
                                                                                                                                                      checkboxInput(inputId = 'unresolYuModML', label = 'Unresolve tips?'),
                                                                                                                                                      actionButton(inputId = 'addYuleModML', label = 'add')), br(),
                                                                                                                                     
                                                                                                                                     checkboxInput(inputId = 'BDContModML',label = 'Birth-Death constant'),
                                                                                                                                     conditionalPanel(condition = 'input.BDContModML == 1',
                                                                                                                                                      textInput(inputId = 'fractBDContModML',label = 'Rho',value = '0.9'),
                                                                                                                                                      p('Speciation & Extinction rates'),
                                                                                                                                                      rHandsontableOutput("BDrateModML"),
                                                                                                                                                      checkboxInput(inputId = 'unresolBDContModML', label = 'Unresolve tips?'),
                                                                                                                                                      actionButton(inputId = 'addBDContModML', label = 'add')),br(),
                                                                                                                                     
                                                                                                                                     checkboxInput(inputId = 'BDvarSpeModML',label = 'Birth-Death variable: speciation'),
                                                                                                                                     conditionalPanel(condition = 'input.BDvarSpeModML == 1',
                                                                                                                                                      textInput(inputId = 'fractBDvarSpeModML',label = 'Rho',value = '0.9'),
                                                                                                                                                      selectInput(inputId = 'distBDvarSpeModML',label = 'Distribution: Speciation rate',choices =  c('Select' = 'select', 'linear.t' = 'linear.t', 'stepf.t' = 'stepf.t', 'spline.t' = 'spline.t', 'exp.t' = 'exp.t', 'sigmoid.t' = 'sigmoid.t' ), selected = NULL),
                                                                                                                                                      conditionalPanel("input.distBDvarSpeModML != 'select'",
                                                                                                                                                                       rHandsontableOutput(outputId = "RateBDvarSpeModML")),
                                                                                                                                                      conditionalPanel("input.distBDvarSpeModML == 'spline.t'", fileInput("fileCSVSpeModML", "Load file ")),
                                                                                                                                                      checkboxInput(inputId = 'unresolBDvarSpeModML', label = 'Unresolve tips?'),
                                                                                                                                                      actionButton(inputId = 'addBDvarSpeModML', label = 'add')), br(),
                                                                                                                                     
                                                                                                                                     checkboxInput(inputId = 'BDvarExtModML',label = 'Birth-Death variable: extinction'),
                                                                                                                                     conditionalPanel(condition = 'input.BDvarExtModML == 1',
                                                                                                                                                      textInput(inputId = 'fractBDvarExtModML',label = 'Rho',value = '0.9'),
                                                                                                                                                      selectInput(inputId = 'distBDvarExtModML',label = 'Distribution: Extinction rate',choices =  c('Select' = 'select', 'linear.t' = 'linear.t', 'stepf.t' = 'stepf.t', 'spline.t' = 'spline.t', 'exp.t' = 'exp.t', 'sigmoid.t' = 'sigmoid.t' ), selected = NULL),
                                                                                                                                                      conditionalPanel("input.distBDvarExtModML != 'select'",
                                                                                                                                                                       rHandsontableOutput(outputId = "RateBDvarExtModML")),
                                                                                                                                                      conditionalPanel("input.distBDvarExtModML == 'spline.t'", fileInput("fileCSVExtModML", "Load file ")),
                                                                                                                                                      checkboxInput(inputId = 'unresolBDvarExtModML', label = 'Unresolve tips?'),
                                                                                                                                                      actionButton(inputId = 'addBDvarExtModML', label = 'add')), br(),
                                                                                                                                     
                                                                                                                                     checkboxInput(inputId = 'BDvarSpeExtModML',label = 'Birth-Death variable: Spec. & Exti.'),
                                                                                                                                     conditionalPanel(condition = 'input.BDvarSpeExtModML == 1',
                                                                                                                                                      textInput(inputId = 'fractBDvarSpeExtModML',label = 'Rho',value = '0.9'),
                                                                                                                                                      selectInput(inputId = 'distBDvarSpeExtModMLsp',label = 'Distribution: speciation rate',choices =  c('Select' = 'select', 'linear.t' = 'linear.t', 'stepf.t' = 'stepf.t', 'spline.t' = 'spline.t', 'exp.t' = 'exp.t', 'sigmoid.t' = 'sigmoid.t' ), selected = NULL),
                                                                                                                                                      conditionalPanel("input.distBDvarSpeExtModMLsp != 'select'",
                                                                                                                                                                       rHandsontableOutput(outputId = "RateBDvarSpeExtModMLsp")),
                                                                                                                                                      conditionalPanel("input.distBDvarSpeExtModMLsp == 'spline.t'", fileInput("fileCSVSpeExtModMLsp", "Load file ")),
                                                                                                                                                      
                                                                                                                                                      selectInput(inputId = 'distBDvarSpeExtModMLex',label = 'Distribution: speciation rate',choices =  c('Select' = 'select', 'linear.t' = 'linear.t', 'stepf.t' = 'stepf.t', 'spline.t' = 'spline.t', 'exp.t' = 'exp.t', 'sigmoid.t' = 'sigmoid.t' ), selected = NULL),
                                                                                                                                                      conditionalPanel("input.distBDvarSpeExtModMLex != 'select'",
                                                                                                                                                                       rHandsontableOutput(outputId = "RateBDvarSpeExtModMLex")),
                                                                                                                                                      conditionalPanel("input.distBDvarSpeExtModMLex == 'spline.t'", fileInput("fileCSVSpeExtModMLsp", "Load file ")),
                                                                                                                                                      
                                                                                                                                                      checkboxInput(inputId = 'unresolBDvarSpeExtModML', label = 'Unresolve tips?'),
                                                                                                                                                      actionButton(inputId = 'addBDvarSpeExtModML', label = 'add')), br(),
                                                                                                                                     
                                                                                                                                     checkboxInput(inputId = 'CladoDepenModML',label = 'Clado-dependent model'), br(),
                                                                                                                                     
                                                                                                                                     checkboxInput(inputId = 'DiverDepentModML',label = 'Diversity-dependent model'),
                                                                                                                                     conditionalPanel(condition = 'input.DiverDepentModML == 1',
                                                                                                                                                      selectInput(inputId = 'optModMLDDD',label = 'Optimization method',choices = c('subplex', 'simplex'),br()),
                                                                                                                                                      textInput(inputId = 'missnumDiverModANA',label = 'Missing species',value = '1'),
                                                                                                                                                      selectInput(inputId = 'modelDiverModANA', label = 'model of diversity-dependence', choices = 
                                                                                                                                                                    c('Linear: birth rate & K parameter' = '1',
                                                                                                                                                                      'Linear: bith rate & K\' parameter' = '1.3',
                                                                                                                                                                      'Positive: bith rate & K\' parameter + lambda' = '1.4',
                                                                                                                                                                      'Negative & Positive: birth rate & K\' parameter + lambda' = '1.5',
                                                                                                                                                                      'Exponential: birth rate & K parameter' = '2',
                                                                                                                                                                      'Variant exponential: birth rate & offset at infinity' = '2.1',
                                                                                                                                                                      '1/n: birth rate' = '2.2',
                                                                                                                                                                      'Exponential birth rate & X parameter' = '2.3',
                                                                                                                                                                      'Linear: death rate' = '3',
                                                                                                                                                                      'Exponential: death rate' = '4',
                                                                                                                                                                      'Variant exponential: death rate & offset at infinity' = '4.1',
                                                                                                                                                                      '1/n: death rate & offset at infinity' = '4.2',
                                                                                                                                                                      'Linear: birth & death rate' = '5'
                                                                                                                                                                    )
                                                                                                                                                      ),
                                                                                                                                                      actionButton(inputId = 'addDiverDepentModML', label = 'add'), br(),
                                                                                                                                     ),
                                                                                                                                     
                                                                                                                                     selectInput(inputId = 'modelsFitModML', label = 'Models', choices = NULL, selected = NULL, multiple = T), 
                                                                                                                                     actionButton(inputId = 'ModelRunModML', label = 'RUN'), hr()
                                                                                                                                     
                                                                                                                                     )),
                                                                                                                      column(5,jqui_resizable(box(style='width:100%;overflow-x: scroll;height:100%;overflow-y: scroll;',
                                                                                                                                                  plotOutput(outputId = "phyloMLDiverModANA"),width = 12, status = "info",height = "100%"))),
                                                                                                                      column(4,fluidRow(column(6,fluidRow(box(strong("Pure Birth (Yule)"),plotOutput(outputId = "yuleMLDiverModANA",height ="140px" ),width = 12, status = "success",height = "200px"))),
                                                                                                                                        column(6,fluidRow(box(strong("BD constant"),plotOutput(outputId = "BDConstMLDiverModANA",height ="140px" ),width = 12, status = "success",height = "200px")))),
                                                                                                                             fluidRow(column(6,fluidRow(box(strong("BD - Var.speciation"),plotOutput(outputId = "BDVarSpMLDiverModANA",height ="140px" ),width = 12, status = "success",height = "200px"))),
                                                                                                                                      column(6,fluidRow(box(strong("BD - Var.Extinction"),plotOutput(outputId = "BDVarExMLDiverModANA",height ="140px" ),width = 12, status = "success",height = "200px")))),
                                                                                                                             fluidRow(column(6,fluidRow(box(strong("BD - Var.Spec & Extinc"),plotOutput(outputId = "BDVarSpExMLDiverModANA",height ="140px" ),width = 12, status = "success",height = "200px"))),
                                                                                                                                      column(6,fluidRow(box(strong("Clado-dependent"),plotOutput(outputId = "CladeSplitMLDiverModANA",height ="140px" ),width = 12, status = "success",height = "200px")))),
                                                                                                                             )),
                                                                                                         fluidRow(column(3,
                                                                                                                         card( card_header( strong("Downloads")),
                                                                                                                         radioButtons("exportDiverModANA", "Export output",c("R object (RDS)" = "RDSModML","TXT" = "TXTModML")),
                                                                                                                         downloadButton("downloadDiverModANA", "Download"))),
                                                                                                                  column(5,tags$style(type='text/css', '#outputDiverModANA {background-color: rgba(0,0,0,0);}'),
                                                                                                                         box( strong('Output'),hr(),verbatimTextOutput('outputDiverModANA'), status = "warning",width = 12,height = "100%")),
                                                                                                                  column(4,tags$style(type='text/css', '#messDiverModANA {background-color: rgba(0,0,0,0);}'),
                                                                                                                         box(strong('Warning/Error'),hr(),verbatimTextOutput('messDiverModANA'),status = "danger",width = 12,height = "100%")))),
                                                                                                  column(2, card( card_header( strong("Graphic controls")),
                                                                                                         sliderInput("PlotWidthDiverModANA", "Tree width (px)",step = 100,min = 100, max = 1000, value = 400),
                                                                                                                  sliderInput("PlotHeightDiverModANA", "Tree height (px)",step = 100,min = 100, max = 1000, value = 800),
                                                                                                         sliderInput("tipSizeDiverModANA", "Tip label size",step = 0.1,min = 0, max = 3, value = 0.7),
                                                                                                                actionButton('PlotEditorDiverModANA', 'Plot Editor'))))

                                                                                        
                                                                                         # Finish MLDiverModANA
                                                                                         ),
                                                                                tabPanel(id="BIDiverModANA",title = "Bayesian Inference", verbatimTextOutput("summary"))
                                                                    )
                                                                    # Finish of APDivMod
                                                           )
                                                           # Finish of TabsDivMod
                                               )
                                               
                                               # Finish of DiverMod
                                      )
                                      #Finish of navbarMenu            
                           ),
                           tabPanel(id="Rcode","Code",verbatimTextOutput("CodePanel"))
                           #Finish of UI        
)





# Define server logic required to draw a histogram
server <- function(input, output, session) {
  
  
  
  ###################################################################################################################################
  #
  #                                           Data panel LTT
  #
  ###################################################################################################################################
  
  
  #--------------------------------- Set values-------------------------
  lttDTVals <- reactiveValues()
  lttDTVals$outputbox <- NULL
  lttDTVals$errorbox <- "No messages"
  lttDTVals$strbox <- NULL
  lttDTVals$ultrametric <- NULL
  lttDTVals$ageTableDiverDT <- NULL
  lttDTVals$tolCal <- '1e8'
  lttDTVals$itermaxCal <- '1e4'
  lttDTVals$evalmax <- '1e4'
  lttDTVals$dualitermaxCal <- '20'
  lttDTVals$epsilonCal <- '1e6'
  lttDTVals$RcodeCount <- 0
  
  
  
  
  #--------------------------------- upload tree-------------------------
  TreelttDT <- eventReactive(input$importTreelttDT, {
    
    if (input$ExamplttDT == T){
      readRDS(file = 'data/Example.noUltrametric.RDS')
    }else{
      req(input$fileTreelttDT)
      validate(need(try(input$fileTreelttDT$datapath),"Please, load a tree or active example "))
      
      if (is.nexus(input$fileTreelttDT$datapath) == T) {
        read.nexus(file = input$fileTreelttDT$datapath)
      } else {
        read.tree(file = input$fileTreelttDT$datapath)
      }
    }
  })
  
  
  
  #--------------------------------- reactive values: for load tree-------------------------
  observeEvent(input$importTreelttDT,{
    if (is.null(TreelttDT())) return()
    lttDTVals$errorbox <- c(messageCatch(TreelttDT()))
    lttDTVals$outputbox <- TreelttDT()
    lttDTVals$strbox <-  TreelttDT()
    
    
  })
  
  
  #--------------------------------- evaluating ultrametic-------------------------
  
  # ask if ultrametric
  ultrametriclttDT <- eventReactive(input$ultrlttDT,{
    is.ultrametric(TreelttDT())
  })
  
  #Answer and display buttons
  observeEvent(input$ultrlttDT, {
    
    if (ultrametriclttDT() == T){
      lttDTVals$outputbox <- paste('Is an ultrametric tree? ',ultrametriclttDT())
      
      
    } else if (ultrametriclttDT() == F) {
      
      hlttDT <- diag(vcv(TreelttDT()))
      cvBranchlttDT <- round(sd(hlttDT)/mean(hlttDT),digits = 2)*100
      
      lttDTVals$outputbox <- paste(ultrametriclttDT(), '-', 'Coeffient of variation among branches:', cvBranchlttDT, '%' )
      
      if (cvBranchlttDT >= 5 ){
        lttDTVals$errorbox <- matrix(data = c("You should correct ultrametricity",
                                              "The CV is under 5%, you should recalibrate using Chronos recalibrate option   \n"),nrow = 2,1)
        colnames(lttDTVals$errorbox) <- "message"
      }else{
        lttDTVals$errorbox <- matrix(data = c("You should correct ultrametricity",
                                              "The CV is under 5%, you could round lenght branches   \n"),nrow = 2,1)
        colnames(lttDTVals$errorbox) <- "message"
      }
      
      
      output$forceultrlttDT <- renderUI({
        selectInput(inputId = "frcUltButtlttDT",label = strong("Force ultrametricity"),choices = c("Select" = "select",
                                                                                                   "Round decimals" = "roundlttDT", 
                                                                                                   "Chronos calbration" = "chronoslttDT"))
        
        
      })
      
      output$RunUltrlttDT <- renderUI({
        actionButton('ButtonUltralttDT', 'Solve Ultrametricity')
      })
      
    }
    
  })
  
  
  #------------------------------------------------------------Solving Ultrametricity-----------------------------------------------
  
  
  
  ### In case User choose Chronos recalibration
  
  # checking branches
  
  observeEvent(input$frcUltButtlttDT,{
    if (input$frcUltButtlttDT != 'chronoslttDT') return()
    
    if(is.null(TreelttDT()$edge.length) == T){
      lttDTVals$outputbox <- TreelttDT()$edge.length
      lttDTVals$errorbox <- " Your tree should have lenght branch"
    }else{
      lttDTVals$outputbox <- TreelttDT()$edge.length
      lttDTVals$errorbox <- paste("edge lengths: ", is.null(TreelttDT()$edge.length))
    }
  })
  
  ########## Loading data for calibration 
  
  # Loading CSV to calibrate  by nodes
  observeEvent(input$importAgeCSVlttDT,{
    req(input$fileagelttDT)
    validate(need(try(input$fileagelttDT$datapath),"Please, load a tree or active example "))
    lttDTVals$ageTablelttDT <-read.csv(file = input$fileagelttDT$datapath,header = T)
  })
  
  
  #Temporal object to print in info panel
  # info: chronos table
  observeEvent(input$importAgeCSVlttDT, {
    lttDTVals$outputbox <- lttDTVals$ageTablelttDT
  })
  
  
  # Loading CSV to calibrate  by tips
  
  #Load csv by tips
  
  observeEvent(input$importbytipsCSVlttDT,{
    req(input$filebytipslttDT)
    validate(need(try(input$filebytipslttDT$datapath),"Please, load a tree or active example "))
    lttDTtable1 <- read.csv(file = input$filebytipslttDT$datapath,header = T)
    nodestocallttDT <- apply(lttDTtable1, 2, getNodes,tree=TreelttDT())
    
    
    lttDTVals$ageTablelttDT <- t(rbind(nodestocallttDT,lttDTtable1[1,],lttDTtable1[2,]))
    row.names(lttDTVals$ageTablelttDT) <- NULL
    colnames(lttDTVals$ageTablelttDT)  <- c("nodes", "age.min",	"age.max")
    lttDTVals$ageTablelttDT <- apply(lttDTVals$ageTablelttDT,2,as.numeric)
  })
  
  
  #Temporal object to print in info panel
  # info: chronos table
  observeEvent(input$importbytipsCSVlttDT, {
    lttDTVals$outputbox <- lttDTVals$ageTablelttDT
  })
  
  
  
  ageTablelttDT<-eventReactive(input$importbytipsCSVlttDT |  input$importAgeCSVlttDT,
                               {lttDTVals$ageTablelttDT})
  
  
  
  observeEvent(input$ControlCallttDT ,{
    if (input$ControlCallttDT == 'default') {
      return()
    }else if (input$ControlCallttDT == 'Customize'){
      
      lttDTVals$tolCal <- as.character(input$tolCallttDT)
      lttDTVals$itermaxCal <- as.character(input$itermaxCallttDT)
      lttDTVals$evalmax <- as.character(input$evalmaxCallttDT)
      lttDTVals$dualitermaxCal <- as.character(input$dualiterCallttDT)
      lttDTVals$epsilonCal <- as.character(input$epsiCallttDT)}
    
  })
  
  #Solving Ultrametricity
  
  TreelttDT2 <- eventReactive(input$ButtonUltralttDT,{
    
    if  (input$frcUltButtlttDT == 'roundlttDT'){
      force.ultrametric(tree = TreelttDT(),method = input$methodRoundlttDT)
    }else if (input$frcUltButtlttDT == 'chronoslttDT'){
      
      req(ageTablelttDT())
      
      if (input$ModelsCallttDT == "discrete"){
        makeCallttDT <- makeChronosCalib(phy = TreelttDT(),
                                         node = ageTablelttDT()[,1],
                                         age.min = ageTablelttDT()[,2] ,
                                         age.max = ageTablelttDT()[,3],
                                         interactive = F,
                                         soft.bounds = F )
        
        controlsCallttDT <- chronos.control(tol = as.numeric(lttDTVals$tolCal),
                                            iter.max = as.numeric(lttDTVals$itermaxCal),
                                            eval.max = as.numeric(lttDTVals$evalmax),
                                            nb.rate.cat = as.numeric(input$nbratecallttDT),
                                            epsilon = as.numeric(lttDTVals$epsilonCal))
        
        calibralttDT <- chronos(TreelttDT(),model = "discrete", lambda = as.numeric(input$lambdaChronoslttDT),
                                calibration = makeCallttDT,
                                control = controlsCallttDT)
        
      }else if(input$ModelsCallttDT == "clock"){
        makeCallttDT <- makeChronosCalib(phy = TreelttDT(),
                                         node = ageTablelttDT()[,1],
                                         age.min = ageTablelttDT()[,2] ,
                                         age.max = ageTablelttDT()[,3],
                                         interactive = F,
                                         soft.bounds = F )
        
        controlsCallttDT <- chronos.control(tol = as.numeric(lttDTVals$tolCal),
                                            iter.max = as.numeric(lttDTVals$itermaxCal),
                                            eval.max = as.numeric(lttDTVals$evalmax),
                                            nb.rate.cat = as.numeric("1"),
                                            epsilon = as.numeric(lttDTVals$epsilonCal))
        
        calibralttDT <- chronos(TreelttDT(),model = "clock", lambda = as.numeric(input$lambdaChronoslttDT),
                                calibration = makeCallttDT,
                                control = controlsCallttDT)
      }else{
        makeCallttDT <- makeChronosCalib(phy = TreelttDT(),
                                         node = ageTablelttDT()[,1],
                                         age.min = ageTablelttDT()[,2] ,
                                         age.max = ageTablelttDT()[,3],
                                         interactive = F,
                                         soft.bounds = F )
        
        controlsCallttDT <- chronos.control(tol = as.numeric(lttDTVals$tolCal),
                                            iter.max = as.numeric(lttDTVals$itermaxCal),
                                            eval.max = as.numeric(lttDTVals$evalmax),
                                            nb.rate.cat = as.numeric("10"),
                                            epsilon = as.numeric(lttDTVals$epsilonCal))
        
        calibralttDT <- chronos(TreelttDT(),model = input$ModelsCallttDT, lambda = as.numeric(input$lambdaChronoslttDT),
                                calibration = makeCallttDT,
                                control = controlsCallttDT)
      }
      
      return(calibralttDT)
    }
    
    
  })
  
  
  # in case the tree is ultrametric but no binary
  
  TreelttDT3 <- reactive({
    if (ultrametriclttDT() == T){
      return(TreelttDT())
    }else{
      return(TreelttDT2())
    }
  })
  
  #Temporal object to print in info panel
  # info: object after solve ultrametricity
  
  observeEvent(input$ButtonUltralttDT,{
    req(TreelttDT3())
    hlttDT2 <- diag(vcv(TreelttDT3()))
    cvBranchlttDT2 <- round(sd(hlttDT2)/mean(hlttDT2),digits = 2)*100
    
    isUltralttDT2 <- is.ultrametric(TreelttDT3())
    
    
    if  (input$frcUltButtlttDT == 'roundlttDT'){
      lttDTVals$outputbox <- paste('Ultrametric by Round lenght branches:',isUltralttDT2, '-', 'Coeffient of variation among branches:', cvBranchlttDT2, '%' )
      lttDTVals$errorbox <- matrix(c("*    force.ultrametric does not include a formal method to    *",
                                     "*    ultrametricize a tree & should only be used to coerce    *",
                                     "*   a phylogeny that fails is.ultramtric due to rounding --   *",
                                     "*    not as a substitute for formal rate-smoothing methods.   *"),
                                   4,1)
      colnames(lttDTVals$errorbox) <- "NOTE"
      
      
    }else if (input$frcUltButtlttDT == 'chronoslttDT'){
      lttDTVals$outputbox <-  matrix(c(paste('Ultrametric by Chronos Calibration',isUltralttDT2, '-', 'Coeffient of variation among branches:', cvBranchlttDT2, '%' ),
                                       paste("log-lik =", attr(x = TreelttDT3(),which = "ploglik")),
                                       paste("PHIIC =", attr(x = TreelttDT3(),which = "PHIIC")$PHIIC)),
                                     3,1)
      colnames(lttDTVals$outputbox) <- "Recalibration"
      lttDTVals$errorbox <- attr(x = TreelttDT3(),which = "message")
    }
    lttDTVals$strbox <- TreelttDT3()
  })
  
  
  
  
  
  #
  #--------------------------------- Solving polytomic trees -------------------------
  # 
  
  binarylttDT <- eventReactive(input$BinarylttDT,{
    is.binary(TreelttDT3())
  })
  
  
  
  #Temporal object to print in info panel
  # info: tree
  observeEvent(input$BinarylttDT, {
    
    if (binarylttDT() == T){
      lttDTVals$outputbox <- paste('Is a binary tree? ', binarylttDT())
      
      
    } else  {
      lttDTVals$outputbox <- paste('Is a binary tree? ', binarylttDT(), '-', 'Please, solve the polytomic nodes' )
      
      output$PolilttDT <- renderUI({
        selectInput("ResolvelttDT", "How to resolve multichotomies", choices = c('Resolve randomly' = 'ramdom','how they appear in the tree' = 'order' ))
      })
      
      output$PolytlttDT <- renderUI({
        actionButton('ButtonPolytlttDT', 'Solve polytomy')
      })
      
    }
    
  })
  
  
  
  
  
  #Solving polytomies
  
  TreelttDT4 <- eventReactive(input$ButtonPolytlttDT,{
    if (input$ResolvelttDT == 'ramdom'){
      multi2di(TreelttDT3(), random = T)
    } else if (input$ResolvelttDT == 'order' ){
      multi2di(TreelttDT3(), random = F)
    }
  })
  
  
  TreelttDT5 <- reactive({
    if (binarylttDT() == T){
      return(TreelttDT3())
    }else{
      return(TreelttDT4())
    }
  })
  
  
  #Temporal object to print in info panel
  # info: tree
  observeEvent(input$ButtonPolytlttDT, {
    try(TreelttDT4())
    
    isBinary <- is.binary(TreelttDT4())
    
    lttDTVals$outputbox <- paste('Is a binary tree? ',isBinary )
    lttDTVals$errorbox <- c(messageCatch(isBinary))
    lttDTVals$strbox <- TreelttDT4()
  })
  
  
  
  
  
  ####################################### Plots ##########################################################
  
  #--------------------------------- phylogeny-------------------------
  
  heightlttDT <- reactive(input$heightlttDT[1])
  widthlttDT <- reactive(input$widthlttDT[1])
  
  output$phylolttDT <- renderPlot(height = isolate(heightlttDT), width = isolate(widthlttDT),res = 96,expr = {
    if(is.null(TreelttDT()))return()
    validate(need(try(TreelttDT()), " load a tree or active example "))
    rawPhylo <- plot.phylo(TreelttDT(), #show.tip.label = input$tipLabelsDiverDT[1],
                           #cex = input$tipSizeDiverDT[1], use.edge.length = input$branchLengthDiverDT,
                           #type = input$plotTypeDiverDT,
                           edge.width = 0.8,edge.color = 'grey40')
    
    return(rawPhylo)
    
  })
  
  ####################################### Messages ##########################################################
  
  #--------------------------------- Message in error box-------------------------
  output$messlttDT <- renderPrint({
    print(lttDTVals$errorbox)
  })
  
  
  #--------------------------------- Data structure-------------------------  
  output$strlttDT <- renderPrint({
    req(lttDTVals$strbox)
    print(str(lttDTVals$strbox))
  })
  
  
  #--------------------------------- Output box-------------------------
  output$outputlttDT <- renderPrint({
    req(lttDTVals$outputbox)
    print(lttDTVals$outputbox)
  })
  
  ####################################### Reset Data Panel Diver Models 
  
  observeEvent(input$ButtonResetlttDT, {
    if(is.null(TreelttDT()))return()
    
    lttDTVals$outputbox <- NULL
    lttDTVals$errorbox <- "No messages"
    lttDTVals$strbox <- NULL
    lttDTVals$ultrametric  <- NULL
    
    # Tree
    #lttDTVals$Treediver 
    # lttDTVals$Treediver2 <- NULL
    # lttDTVals$Treediver3 <- NULL
    
    reset("lttDTReset")
    #updateActionButton(session,inputId = "importTreeDiver",label = NULL,icon =icon(name = "upload"))
    #session$sendCustomMessage(session,type = "resetFileInputHandler", "fileTreeDiver")
    
    
  })
  
  
  
  
  ###################################################################################################################################
  #
  #                                           ANALYSIS panel LTT
  #
  ###################################################################################################################################



  #--------------------------------- Set values-------------------------
  lttANAVals <- reactiveValues()
  
  lttANAVals$outputbox <- NULL
  lttANAVals$errorbox <- "No messages"





  #--------------------------------- Set values-------------------------
  treelttANA <- eventReactive(input$loadDatalttANA,{

    validate(need(try(TreelttDT5()),"Please, your tree must be ultrametric and binary ")
    )
    TreelttDT5()
  }
  )

  #Temporal object to print in info panel
  # info: tree
  observeEvent(input$loadDatalttANA, {
    try(treelttANA())
    
    lttANAVals$outputbox <- treelttANA()
    lttANAVals$errorbox <- c(messageCatch(treelttANA()))
    
  })
  
  

  #--------------------------------- Run LTT -------------------------


  lttrun <- eventReactive( input$runlttANA,{
    ltt(tree = treelttANA(),
        plot = FALSE,
        drop.extinct = input$dropExtinctlttANA[1],
        log.lineages = input$logLineageslttANA[1],
        gamma = input$GammaPybuslttANA[1])
  })



  #Temporal object to print in info panel
  # info: tree
  observeEvent(input$runlttANA, {
    try(lttrun())

    lttANAVals$outputbox <- lttrun()
    lttANAVals$errorbox <- c(messageCatch(lttrun()))

  })
  
  
  
  
  #--------------------------------- Run MCCR -------------------------
  
  MCCRlttANA <- eventReactive(input$runMCCRlttANA,{
    mccr(lttrun(),rho = as.numeric(input$RhoMCCRlttANA[1]),nsim = as.numeric(input$nsimMCCRlttANA))
  })
  
  #Temporal object to print in info panel
  # info: tree
  observeEvent(input$runMCCRlttANA, {
    try(MCCRlttANA())
    
    lttANAVals$outputbox <- MCCRlttANA()
    lttANAVals$errorbox <- c(messageCatch(MCCRlttANA()))
    
  })

  
  # 
  # 
  # ####################################### Plots ##########################################################
  # 
  # #--------------------------------- phylogeny-------------------------

  heightlttANA <- reactive(input$heightlttANA[1])
  widthlttANA <- reactive(input$widthlttANA[1])

  output$phylottANA <- renderPlot(height = isolate(heightlttANA), width = isolate(widthlttANA),res = 96,expr = {
    if(is.null(treelttANA())) return()
    validate(need(try(treelttANA()), " load a tree or active example "))
    rawPhylo2 <- plot.phylo(treelttANA(), #show.tip.label = input$tipLabelsDiverDT[1],
                            #cex = input$tipSizeDiverDT[1], use.edge.length = input$branchLengthDiverDT,
                            #type = input$plotTypeDiverDT,
                            edge.width = 0.8,edge.color = 'grey40')

    return(rawPhylo2)

  })
  
  
  
  output$PlotlttANA <- renderPlot({
    
    plot(lttrun(), axes = FALSE, log.lineages = input$logLineages[1], xlab = "time (mybp)")
    axis(2, las = 2, cex.axis = 0.8)
    labs <- axTicks(1)
    h <- max(nodeHeights(treelttANA()))
    at <- h - labs
    axis(1, at = at, labels = labs, cex.axis = 0.8)
    clip(x1 = 0,x2 = h,y1 = 0,y2 = Ntip(treelttANA()))
    grid()
  })
  
  
  output$plotMCCRlttANA <- renderPlot({
    plot(MCCRlttANA(),las = 1,cex.axis = 0.8)
  })

  ####################################### Messages ##########################################################

  #--------------------------------- Message in error box-------------------------
  output$messlttANA <- renderPrint({
    print(lttANAVals$errorbox)
  })



  #--------------------------------- Output box-------------------------
  output$outputlttANA <- renderPrint({
    req(lttANAVals$outputbox)
    print(lttANAVals$outputbox)
  })

  ####################################### Reset Data Panel Diver Models

  observeEvent(input$ButtonResetlttANA, {
    if(is.null(treelttANA()))return()

    lttANAVals$outputbox <- NULL
    lttANAVals$errorbox <- "No messages"


    # Tree
    #lttDTVals$Treediver
    # lttDTVals$Treediver2 <- NULL
    # lttDTVals$Treediver3 <- NULL

    reset("lttANAReset")
    #updateActionButton(session,inputId = "importTreeDiver",label = NULL,icon =icon(name = "upload"))
    #session$sendCustomMessage(session,type = "resetFileInputHandler", "fileTreeDiver")


  })



  
  
  
  
  
  ###################################################################################################################################
  #
  #                                           Data panel Diversification models
  #
  ###################################################################################################################################
  
  
  #--------------------------------- Set values-------------------------
  DPDiverModVals <- reactiveValues()
  DPDiverModVals$outputbox <- NULL
  DPDiverModVals$errorbox <- "No messages"
  DPDiverModVals$strbox <- NULL
  DPDiverModVals$ultrametric <- NULL
  DPDiverModVals$ageTableDiverDT <- NULL
  DPDiverModVals$tolCal <- '1e8'
  DPDiverModVals$itermaxCal <- '1e4'
  DPDiverModVals$evalmax <- '1e4'
  DPDiverModVals$dualitermaxCal <- '20'
  DPDiverModVals$epsilonCal <- '1e6'
  DPDiverModVals$RcodeCount <- 0
  
  
  
  
  #--------------------------------- upload tree-------------------------
  Treediver <- eventReactive(input$importTreeDiverModDT, {
    
    if (input$ExampDiverModDT == T){
      readRDS(file = 'data/Example.noUltrametric.RDS')
    }else{
      req(input$fileTreeDiverModDT)
      validate(need(try(input$fileTreeDiverModDT$datapath),"Please, load a tree or active example "))
      
      if (is.nexus(input$fileTreeDiverModDT$datapath) == T) {
        read.nexus(file = input$fileTreeDiverModDT$datapath)
      } else {
        read.tree(file = input$fileTreeDiverModDT$datapath)
      }
    }
  })
  
  
  
  #--------------------------------- reactive values: for load tree-------------------------
  observeEvent(input$importTreeDiverModDT,{
    if (is.null(Treediver())) return()
    DPDiverModVals$errorbox <- c(messageCatch(Treediver()))
    DPDiverModVals$outputbox <- Treediver()
    DPDiverModVals$strbox <-  Treediver()
    
    
  })
  
  
  #--------------------------------- evaluating ultrametic-------------------------
  
  # ask if ultrametric
  ultrametricDiverModDT <- eventReactive(input$ultrDiverModDT,{
    is.ultrametric(Treediver())
  })
  
  #Answer and display buttons
  observeEvent(input$ultrDiverModDT, {
    
    if (ultrametricDiverModDT() == T){
      DPDiverModVals$outputbox <- paste('Is an ultrametric tree? ',ultrametricDiverModDT())
      
      
    } else if (ultrametricDiverModDT() == F) {
      
      h <- diag(vcv(Treediver()))
      cvBranch <- round(sd(h)/mean(h),digits = 2)*100
      
      DPDiverModVals$outputbox <- paste(ultrametricDiverModDT(), '-', 'Coeffient of variation among branches:', cvBranch, '%' )
      
      if (cvBranch >= 5 ){
        DPDiverModVals$errorbox <- matrix(data = c("You should correct ultrametricity",
                                                   "The CV is under 5%, you should recalibrate using Chronos recalibrate option   \n"),nrow = 2,1)
        colnames(DPDiverModVals$errorbox) <- "message"
      }else{
        DPDiverModVals$errorbox <- matrix(data = c("You should correct ultrametricity",
                                                   "The CV is under 5%, you could round lenght branches   \n"),nrow = 2,1)
        colnames(DPDiverModVals$errorbox) <- "message"
      }
      
      
      output$forceultrDiverModDT <- renderUI({
        selectInput(inputId = "frcUltButtDiverModDT",label = strong("Force ultrametricity"),choices = c("Select" = "select",
                                                                                                        "Round decimals" = "roundDiverModDT", 
                                                                                                        "Chronos calbration" = "chronosDiverModDT"))
        
        
      })
      
      output$RunUltrDiverModDT <- renderUI({
        actionButton('ButtonUltraDiverModDT', 'Solve Ultrametricity')
      })
      
    }
    
  })
  
  
  #------------------------------------------------------------Solving Ultrametricity-----------------------------------------------
  
  
  
  ### In case User choose Chronos recalibration
  
  # checking branches
  
  observeEvent(input$frcUltButtDiverModDT,{
    if (input$frcUltButtDiverModDT != 'chronosDiverDt') return()
    
    if(is.null(Treediver()$edge.length) == T){
      DPDiverModVals$outputbox <- Treediver()$edge.length
      DPDiverModVals$errorbox <- " Your tree should have lenght branch"
    }else{
      DPDiverModVals$outputbox <- Treediver()$edge.length
      DPDiverModVals$errorbox <- paste("edge lengths: ", is.null(Treediver()$edge.length))
    }
  })
  
  ########## Loading data for calibration 
  
  # Loading CSV to calibrate  by nodes
  observeEvent(input$importAgeCSVDiverModDT,{
    req(input$fileageDiverModDT)
    validate(need(try(input$fileageDiverModDT$datapath),"Please, load a tree or active example "))
    DPDiverModVals$ageTableDiverDT <-read.csv(file = input$fileageDiverModDT$datapath,header = T)
  })
  
  
  #Temporal object to print in info panel
  # info: chronos table
  observeEvent(input$importAgeCSVDiverModDT, {
    DPDiverModVals$outputbox <- DPDiverModVals$ageTableDiverDT
  })
  
  
  # Loading CSV to calibrate  by tips
  
  #Load csv by tips
  
  observeEvent(input$importbytipsCSVDiverModDT,{
    req(input$filebytipsDiverModDT)
    validate(need(try(input$filebytipsDiverModDT$datapath),"Please, load a tree or active example "))
    table1 <- read.csv(file = input$filebytipsDiverModDT$datapath,header = T)
    nodestocal <- apply(table1, 2, getNodes,tree=Treediver())
    
    
    DPDiverModVals$ageTableDiverDT <- t(rbind(nodestocal,table1[1,],table1[2,]))
    row.names(DPDiverModVals$ageTableDiverDT) <- NULL
    colnames(DPDiverModVals$ageTableDiverDT)  <- c("nodes", "age.min",	"age.max")
    DPDiverModVals$ageTableDiverDT <- apply(DPDiverModVals$ageTableDiverDT,2,as.numeric)
  })
  
  
  #Temporal object to print in info panel
  # info: chronos table
  observeEvent(input$importbytipsCSVDiverModDT, {
    DPDiverModVals$outputbox <- DPDiverModVals$ageTableDiverDT
  })
  
  
  
  ageTableDiverDT<-eventReactive(input$importbytipsCSVDiverModDT |  input$importAgeCSVDiverModDT,
                                 {DPDiverModVals$ageTableDiverDT})
  
  
  
  observeEvent(input$ControlCalDiverModDT ,{
    if (input$ControlCalDiverModDT == 'default') {
      return()
    }else if (input$ControlCalDiverModDT== 'Customize'){
      
      DPDiverModVals$tolCal <- as.character(input$tolCalDiverModDT)
      DPDiverModVals$itermaxCal <- as.character(input$itermaxCalDiverModDT)
      DPDiverModVals$evalmax <- as.character(input$evalmaxCalDiverModDT)
      DPDiverModVals$dualitermaxCal <- as.character(input$dualiterCalDiverModDT)
      DPDiverModVals$epsilonCal <- as.character(input$epsiCalDiverModDT)}
    
  })
  
  #Solving Ultrametricity
  
  Treediver2 <- eventReactive(input$ButtonUltraDiverModDT,{
    
    if  (input$frcUltButtDiverModDT == 'roundDiverModDT'){
      force.ultrametric(tree = Treediver(),method = input$methodRoundDiverModDT)
    }else if (input$frcUltButtDiverModDT == 'chronosDiverModDT'){
      
      req(ageTableDiverDT())
      
      if (input$ModelsCalDiverModDT == "discrete"){
        makeCal <- makeChronosCalib(phy = Treediver(),
                                    node = ageTableDiverDT()[,1],
                                    age.min = ageTableDiverDT()[,2] ,
                                    age.max = ageTableDiverDT()[,3],
                                    interactive = F,
                                    soft.bounds = F )
        
        controlsCal <- chronos.control(tol = as.numeric(DPDiverModVals$tolCal),
                                       iter.max = as.numeric(DPDiverModVals$itermaxCal),
                                       eval.max = as.numeric(DPDiverModVals$evalmax),
                                       nb.rate.cat = as.numeric(input$nbratecalDiverModDT),
                                       epsilon = as.numeric(DPDiverModVals$epsilonCal))
        
        calibra <- chronos(Treediver(),model = "discrete", lambda = as.numeric(input$lambdaChronosDiverModDT),
                           calibration = makeCal,
                           control = controlsCal)
        
      }else if(input$ModelsCalDiverModDT == "clock"){
        makeCal <- makeChronosCalib(phy = Treediver(),
                                    node = ageTableDiverDT()[,1],
                                    age.min = ageTableDiverDT()[,2] ,
                                    age.max = ageTableDiverDT()[,3],
                                    interactive = F,
                                    soft.bounds = F )
        
        controlsCal <- chronos.control(tol = as.numeric(DPDiverModVals$tolCal),
                                       iter.max = as.numeric(DPDiverModVals$itermaxCal),
                                       eval.max = as.numeric(DPDiverModVals$evalmax),
                                       nb.rate.cat = as.numeric("1"),
                                       epsilon = as.numeric(DPDiverModVals$epsilonCal))
        
        calibra <- chronos(Treediver(),model = "clock", lambda = as.numeric(input$lambdaChronosDiverModDT),
                           calibration = makeCal,
                           control = controlsCal)
      }else{
        makeCal <- makeChronosCalib(phy = Treediver(),
                                    node = ageTableDiverDT()[,1],
                                    age.min = ageTableDiverDT()[,2] ,
                                    age.max = ageTableDiverDT()[,3],
                                    interactive = F,
                                    soft.bounds = F )
        
        controlsCal <- chronos.control(tol = as.numeric(DPDiverModVals$tolCal),
                                       iter.max = as.numeric(DPDiverModVals$itermaxCal),
                                       eval.max = as.numeric(DPDiverModVals$evalmax),
                                       nb.rate.cat = as.numeric("10"),
                                       epsilon = as.numeric(DPDiverModVals$epsilonCal))
        
        calibra <- chronos(Treediver(),model = input$ModelsCalDiverModDT, lambda = as.numeric(input$lambdaChronosDiverModDT),
                           calibration = makeCal,
                           control = controlsCal)
      }
      
      return(calibra)
    }
    
    
  })
  
  
  # in case the tree is ultrametric but no binary
  
  Treediver3 <- reactive({
    if (ultrametricDiverModDT() == T){
      return(Treediver())
    }else{
      return(Treediver2())
    }
  })
  
  #Temporal object to print in info panel
  # info: object after solve ultrametricity
  
  observeEvent(input$ButtonUltraDiverModDT,{
    req(Treediver3())
    h2 <- diag(vcv(Treediver3()))
    cvBranch2 <- round(sd(h2)/mean(h2),digits = 2)*100
    
    isUltra2 <- is.ultrametric(Treediver3())
    
    
    if  (input$frcUltButtDiverModDT == 'roundDiverModDT'){
      DPDiverModVals$outputbox <- paste('Ultrametric by Round lenght branches:',isUltra2, '-', 'Coeffient of variation among branches:', cvBranch2, '%' )
      DPDiverModVals$errorbox <- matrix(c("*    force.ultrametric does not include a formal method to    *",
                                          "*    ultrametricize a tree & should only be used to coerce    *",
                                          "*   a phylogeny that fails is.ultramtric due to rounding --   *",
                                          "*    not as a substitute for formal rate-smoothing methods.   *"),
                                        4,1)
      colnames(DPDiverModVals$errorbox) <- "NOTE"
      
      
    }else if (input$frcUltButtDiverModDT == 'chronosDiverModDT'){
      DPDiverModVals$outputbox <-  matrix(c(paste('Ultrametric by Chronos Calibration',isUltra2, '-', 'Coeffient of variation among branches:', cvBranch2, '%' ),
                                            paste("log-lik =", attr(x = Treediver3(),which = "ploglik")),
                                            paste("PHIIC =", attr(x = Treediver3(),which = "PHIIC")$PHIIC)),
                                          3,1)
      colnames(DPDiverModVals$outputbox) <- "Recalibration"
      DPDiverModVals$errorbox <- attr(x = Treediver3(),which = "message")
    }
    DPDiverModVals$strbox <- Treediver3()
  })
  
  
  
  
  
  #
  #--------------------------------- Solving polytomic trees -------------------------
  # 
  
  binaryDiverDT <- eventReactive(input$BinaryDiverModDT,{
    is.binary(Treediver3())
  })
  
  
  
  #Temporal object to print in info panel
  # info: tree
  observeEvent(input$BinaryDiverModDT, {
    
    if (binaryDiverDT() == T){
      DPDiverModVals$outputbox <- paste('Is a binary tree? ', binaryDiverDT())
      
      
    } else  {
      DPDiverModVals$outputbox <- paste('Is a binary tree? ', binaryDiverDT(), '-', 'Please, solve the polytomic nodes' )
      
      output$PoliDiverModDT <- renderUI({
        selectInput("ResolveDiverDT", "How to resolve multichotomies", choices = c('Resolve randomly' = 'ramdom','how they appear in the tree' = 'order' ))
      })
      
      output$PolytDiverDT <- renderUI({
        actionButton('ButtonPolytDiverDT', 'Solve polytomy')
      })
      
    }
    
  })
  
  
  
  
  
  #Solving polytomies
  
  Treediver4 <- eventReactive(input$ButtonPolytDiverDT,{
    if (input$ResolveDiverDT == 'ramdom'){
      multi2di(Treediver3(), random = T)
    } else if (input$ResolveDiverDT == 'order' ){
      multi2di(Treediver3(), random = F)
    }
  })
  
  
  Treediver5 <- reactive({
    if (binaryDiverDT() == T){
      return(Treediver3())
    }else{
      return(Treediver4())
    }
  })
  
  
  #Temporal object to print in info panel
  # info: tree
  observeEvent(input$ButtonPolytDiverDT, {
    try(Treediver4())
    
    isBinary <- is.binary(Treediver4())
    
    DPDiverModVals$outputbox <- paste('Is a binary tree? ',isBinary )
    DPDiverModVals$errorbox <- c(messageCatch(isBinary))
    DPDiverModVals$strbox <- Treediver4()
  })
  
  
  
  
  
  ####################################### Plots ##########################################################
  
  #--------------------------------- phylogeny-------------------------
  
  heightDiverModDT <- reactive(input$heightDiverModDT[1])
  widthDiverModDT <- reactive(input$widthDiverModDT[1])
  
  output$phyloDiverModDT <- renderPlot(height = isolate(heightDiverModDT), width = isolate(widthDiverModDT),res = 96,expr = {
    if(is.null(Treediver()))return()
    validate(need(try(Treediver()), " load a tree or active example "))
    rawPhylo <- plot.phylo(Treediver(), #show.tip.label = input$tipLabelsDiverDT[1],
                           #cex = input$tipSizeDiverDT[1], use.edge.length = input$branchLengthDiverDT,
                           #type = input$plotTypeDiverDT,
                           edge.width = 0.8,edge.color = 'grey40')
    
    return(rawPhylo)
    
  })
  
  ####################################### Messages ##########################################################
  
  #--------------------------------- Message in error box-------------------------
  output$messDiverModDT <- renderPrint({
    print(DPDiverModVals$errorbox)
  })
  
  
  #--------------------------------- Data structure-------------------------  
  output$strDiverModDT <- renderPrint({
    req(DPDiverModVals$strbox)
    print(str(DPDiverModVals$strbox))
  })
  
  
  #--------------------------------- Output box-------------------------
  output$outputDiverModDT <- renderPrint({
    req(DPDiverModVals$outputbox)
    print(DPDiverModVals$outputbox)
  })
  
  ####################################### Reset Data Panel Diver Models 
  
  observeEvent(input$ButtonResetDiverModDT, {
    if(is.null(Treediver()))return()
    
    DPDiverModVals$outputbox <- NULL
    DPDiverModVals$errorbox <- "No messages"
    DPDiverModVals$strbox <- NULL
    DPDiverModVals$ultrametric  <- NULL
    
    # Tree
    #DPDiverModVals$Treediver 
    # DPDiverModVals$Treediver2 <- NULL
    # DPDiverModVals$Treediver3 <- NULL
    
    reset("DiverModDTReset")
    #updateActionButton(session,inputId = "importTreeDiver",label = NULL,icon =icon(name = "upload"))
    #session$sendCustomMessage(session,type = "resetFileInputHandler", "fileTreeDiver")
    
    
  })
  
  ###################################################################################################################################
  #
  #                                           Analysis panel Diversification Models
  #
  ###################################################################################################################################
  
  
  ##############################################################################
  # Diversity: Models ML
  ##############################################################################
  
  #Temporal objects
  #DiverModANAVals
  DiverModANAVals <- reactiveValues()
  DiverModANAVals$outputbox <- NULL
  DiverModANAVals$errorbox <- NULL
  DiverModANAVals$runObjModels <- NULL
  DiverModANAVals$YuleList <-list()
  DiverModANAVals$iteryule<-list()
  DiverModANAVals$BDList <-list()
  DiverModANAVals$iterBD<-list()
  DiverModANAVals$BDvarSpeList <-list()
  DiverModANAVals$iterBDvarSpe<-list()
  DiverModANAVals$BDvarExtList <-list()
  DiverModANAVals$iterBDvarExt<-list()
  DiverModANAVals$BDvarSpeExtList <-list()
  DiverModANAVals$iterBDvarSpeExt<-list()
  DiverModANAVals$DiverDepentModMLList <-list()
  DiverModANAVals$iterDiverDepentModML<-list()
  DiverModANAVals$modelList <- NULL
  
  DiverModANAVals$countyule <- 0
  DiverModANAVals$countBD <- 0
  DiverModANAVals$countBDvarSpe <- 0
  DiverModANAVals$countBDvarExt <- 0
  DiverModANAVals$countBDvarSpeExt <- 0
  DiverModANAVals$countDiverDepentModML <- 0
  
  
  DiverModANAVals$Result <- NULL
  DiverModANAVals$iterYuleResult <- NULL
  DiverModANAVals$ResultYuleList  <- NULL
  DiverModANAVals$countYuleResult <- 0
  
  
  DiverModANAVals$iterBDResult <- NULL
  DiverModANAVals$ResultBDList  <- NULL
  DiverModANAVals$countBDResult <- 0
  
  DiverModANAVals$iterBDvarSpeResult <- NULL
  DiverModANAVals$ResultBDvarSpeList  <- NULL
  DiverModANAVals$countBDvarSpeResult <- 0
  
  
  DiverModANAVals$iterBDvarExtResult <- NULL
  DiverModANAVals$ResultBDvarExtList  <- NULL
  DiverModANAVals$countBDvarExtResult <- 0
  
  DiverModANAVals$iterBDvarSpeExtResult <- NULL
  DiverModANAVals$ResultBDvarSpeExtList  <- NULL
  DiverModANAVals$countBDvarSpeExtResult <- 0
  
  DiverModANAVals$iterDiverDepentModelResult <- NULL
  DiverModANAVals$ResultDiverDepentModelList  <- NULL
  DiverModANAVals$countDiverDepentModelResult <- 0
  

  
 
  
  #--------------------------------- Set values-------------------------
  treeModML <- eventReactive(input$loadDataMLDiverModANA,{
    
    validate(need(try(Treediver5()),"Please, your tree must be ultrametric and binary ")
    )
    Treediver5()
  }
  )
  
  #Temporal object to print in info panel
  # info: tree
  observeEvent(input$loadDataMLDiverModANA, {
    try(treeModML())
    
    DiverModANAVals$outputbox <- treeModML()
    DiverModANAVals$errorbox <- c(messageCatch(treeModML()))
    
  })
  
  
  
  
  
  
  
  
  
  
  
  #plot
  
  
  #Plot tree
  #
  heightDiverModANA <- reactive(input$PlotHeightDiverModANA[1])
  widthDiverModANA <- reactive(input$PlotWidthDiverModANA[1])
  
  output$phyloMLDiverModANA <- renderPlot( height = heightDiverModANA  , width = widthDiverModANA,{
    req(treeModML())
    
    
    plot.phylo(treeModML(), show.tip.label = T,
               cex = input$tipSizeDiverModANA[1], use.edge.length = T,
               edge.width = 0.8,edge.color = 'grey40')
  })
  
  
  
  
  
  
  # Yule Model
  
  observeEvent(input$yuleModML,{
    DiverModANAVals$runObjModels$Yule <- NULL
  })
  
  observeEvent(input$addYuleModML,{
    
    DiverModANAVals$iteryule$rho <- as.numeric(input$fractYuleModML)
    DiverModANAVals$iteryule$rate <- as.numeric(input$BrateYuleModML)
    DiverModANAVals$YuleList$model <- DiverModANAVals$iteryule
    
    DiverModANAVals$countyule <- DiverModANAVals$countyule + 1
    
    names(DiverModANAVals$YuleList)[DiverModANAVals$countyule] <- paste('Yule',DiverModANAVals$countyule, sep = '')
    
    DiverModANAVals$modelList <- c(DiverModANAVals$modelList,paste('Yule',DiverModANAVals$countyule, sep = ''))
    
    DiverModANAVals$runObjModels$Yule <- DiverModANAVals$YuleList
    
    
    output$yuleMLDiverModANA <- renderPlot({
      
      ## set sequence of time intervals
      t<-seq(0,max(nodeHeights(treeModML())),length.out=100)

      ## set plotting parameters
      par(mar=c(2.6,2.4,0.5,0.5),mgp = c(1.7, 0.7, 0))
      ## panel a) constant speciation and extinction
      ## compute speciation/extinction through time
      b<-rep(0.1,length(t))
      #d<-rep(1,length(t))
      ## plot curve
      plot(t,b,type="l",col="blue",
           ylim=c(0,as.numeric(input$BrateYuleModML)+0.1),xlab="time",lwd=2,bty="l",las=1,cex.axis=0.6,cex.lab=0.8,
           ylab="rate")
      
      
      
    })
    
    
  })
  
  #Temporal object to print in info panel
  # info:  models
  observeEvent(input$addYuleModML, {
    
    DiverModANAVals$outputbox <- DiverModANAVals$runObjModels
    
    updateSelectInput(session = session,inputId = 'modelsFitModML',label = 'Models', choices = as.character( DiverModANAVals$modelList),selected = as.character( DiverModANAVals$modelList))
  })
  
  
  
  # BD Model
  
  observeEvent(input$BDContModML,{
    DiverModANAVals$runObjModels$BD <- NULL
    
    ratesBDTable <- matrix(data = c(0.1,0.1),nrow = 1,ncol = 2)
    colnames(ratesBDTable) <- c('Sp', 'Ext')
    row.names(ratesBDTable) <- 'Rates'
    
    output$BDrateModML <- renderRHandsontable({rhandsontable(ratesBDTable, readOnly = F)})
  })
  
  observeEvent(input$addBDContModML,{
    DiverModANAVals$iterBD$rho <- as.numeric(input$fractBDContModML)
    DiverModANAVals$iterBD$Rates <- as.numeric(hot_to_r(input$BDrateModML))
    DiverModANAVals$BDList$model <- DiverModANAVals$iterBD
    
    DiverModANAVals$countBD <- DiverModANAVals$countBD + 1
    
    names(DiverModANAVals$BDList)[DiverModANAVals$countBD] <- paste('BD',DiverModANAVals$countBD, sep = '')
    
    DiverModANAVals$modelList <- c(DiverModANAVals$modelList,paste('BD',DiverModANAVals$countBD, sep = ''))
    
    DiverModANAVals$runObjModels$BD <- DiverModANAVals$BDList
    
    output$BDConstMLDiverModANA <- renderPlot({
      
      ## set sequence of time intervals
      t<-seq(0,max(nodeHeights(treeModML())),length.out=100)
      par(mar=c(2.6,2.4,0.5,0.5),mgp = c(1.7, 0.7, 0))
      
      b<-rep(DiverModANAVals$iterBD$Rates[1],length(t))
      d<-rep(DiverModANAVals$iterBD$Rates[2],length(t))
      ## plot curve
      plot(t,b,type="l",col="blue",
           ylim=c(0,max(DiverModANAVals$iterBD$Rates)+0.1),xlab="time",lwd=2,bty="l",
           las=1,cex.axis=0.6,cex.lab=0.8,
           ylab="rate")
      lines(t,d,col="red",lwd=2,bty="l")})
  })
  
  
  #Temporal object to print in info panel
  # info:  models
  observeEvent(input$addBDContModML, {
    DiverModANAVals$outputbox <- DiverModANAVals$runObjModels
    
    updateSelectInput(session = session,inputId = 'modelsFitModML',label = 'Models', choices = as.character(DiverModANAVals$modelList),selected = as.character( DiverModANAVals$modelList))
  })
  
  
  
  # BDvarSp Model
  
  observeEvent(input$distBDvarSpeModML,{
    DiverModANAVals$runObjModels$BDvarSpe <- NULL
    
    if (input$distBDvarSpeModML == 'linear.t'){
      ratesBDvarSpeTable <- matrix(data = c(0.01,0.01,0.1),nrow = 1,ncol = 3)
      colnames(ratesBDvarSpeTable) <- c('Sp.c', 'Sp.m','Ext')
      row.names(ratesBDvarSpeTable) <- 'Rates'
      output$RateBDvarSpeModML <- renderRHandsontable({rhandsontable(ratesBDvarSpeTable, readOnly = F)})
    }
    
    if (input$distBDvarSpeModML == 'stepf.t'){
      ratesBDvarSpeTable <- matrix(data = c(0.01,0.01,0.01,0.1),nrow = 1,ncol = 4)
      colnames(ratesBDvarSpeTable) <- c('Sp.Y0', 'Sp.Y1', 'Sp.tc','Ext')
      row.names(ratesBDvarSpeTable) <- 'Rates'
      output$RateBDvarSpeModML <- renderRHandsontable({rhandsontable(ratesBDvarSpeTable, readOnly = F)})
    }
    
    if (input$distBDvarSpeModML == 'exp.t'){
      ratesBDvarSpeTable <- matrix(data = c(0.01,0.01,0.1),nrow = 1,ncol = 3)
      colnames(ratesBDvarSpeTable) <- c('Sp.l', 'Sp.a','Ext')
      row.names(ratesBDvarSpeTable) <- 'Rates'
      output$RateBDvarSpeModML <- renderRHandsontable({rhandsontable(ratesBDvarSpeTable, readOnly = F)})
    }
    
    if (input$distBDvarSpeModML == 'sigmoid.t'){
      ratesBDvarSpeTable <- matrix(data = c(0.01,0.01,0.01,0.01,0.1),nrow = 1,ncol = 5)
      colnames(ratesBDvarSpeTable) <- c('Sp.Y0', 'Sp.Y1','Sp.tmid', 'Sp.r','Ext')
      row.names(ratesBDvarSpeTable) <- 'Rates'
      output$RateBDvarSpeModML <- renderRHandsontable({rhandsontable(ratesBDvarSpeTable, readOnly = F)})
    }
    
    if (input$distBDvarSpeModML == 'spline.t'){
      ratesBDvarSpeTable <- matrix(data = c(0.1,0.01,0.1),nrow = 1,ncol = 3)
      colnames(ratesBDvarSpeTable) <- c('Sp.Y0', 'Sp.Y1','Ext')
      row.names(ratesBDvarSpeTable) <- 'Rates'
      output$RateBDvarSpeModML <- renderRHandsontable({rhandsontable(ratesBDvarSpeTable, readOnly = F)})
      
      
    }
  })
  
  
  observeEvent(input$addBDvarSpeModML,{
    DiverModANAVals$iterBDvarSpe$rho <- as.numeric(input$fractBDvarSpeModML)
    DiverModANAVals$iterBDvarSpe$Distribution <- input$distBDvarSpeModML
    DiverModANAVals$iterBDvarSpe$Rates <- as.numeric(hot_to_r(input$RateBDvarSpeModML))
    
    DiverModANAVals$BDvarSpeList$model <- DiverModANAVals$iterBDvarSpe
    
    DiverModANAVals$countBDvarSpe <- DiverModANAVals$countBDvarSpe + 1
    
    names(DiverModANAVals$BDvarSpeList)[DiverModANAVals$countBDvarSpe] <- paste('BDvarSpe',DiverModANAVals$countBDvarSpe, sep = '')
    
    DiverModANAVals$modelList <- c(DiverModANAVals$modelList, paste('BDvarSpe',DiverModANAVals$countBDvarSpe, sep = ''))
    
    DiverModANAVals$runObjModels$BDvarSpe <- DiverModANAVals$BDvarSpeList
    
    output$BDVarSpMLDiverModANA <- renderPlot({
      
      ## set sequence of time intervals
      t<-seq(0,max(nodeHeights(treeModML())),length.out=100)
      par(mar=c(2.6,2.4,0.5,0.5),mgp = c(1.7, 0.7, 0))
      l=DiverModANAVals$iterBDvarSpe$Rates[1]
      a=DiverModANAVals$iterBDvarSpe$Rates[2]
      b<-l*exp(-a*t)
      d<-rep(DiverModANAVals$iterBDvarSpe$Rates[3],length(t))
      ## plot curve
      plot(t,b,type="l",col="blue",
           ylim=c(0,max(DiverModANAVals$iterBDvarSpe$Rates)),xlab="time",lwd=2,bty="l",
           las=1,cex.axis=0.6,cex.lab=0.8,
           ylab="rate")
      lines(t,d,col="red",lwd=2)})
    
  })
  
  
  #Temporal object to print in info panel
  # info:  models
  observeEvent(input$addBDvarSpeModML, {
    
    DiverModANAVals$outputbox <- DiverModANAVals$runObjModels
    
    updateSelectInput(session = session,inputId = 'modelsFitModML',label = 'Models', choices = as.character(DiverModANAVals$modelList),selected = as.character( DiverModANAVals$modelList) )
  })
  
  
  # BDvarExt Model
  
  observeEvent(input$distBDvarExtModML,{
    DiverModANAVals$runObjModels$BDvarExt <- NULL
    
    if (input$distBDvarExtModML == 'linear.t'){
      ratesBDvarExtTable <- matrix(data = c(0.1,0.01,0.01),nrow = 1,ncol = 3)
      colnames(ratesBDvarExtTable) <- c('Sp','Ext.c', 'Ext.m')
      row.names(ratesBDvarExtTable) <- 'Rates'
      output$RateBDvarExtModML <- renderRHandsontable({rhandsontable(ratesBDvarExtTable, readOnly = F)})
    }
    
    if (input$distBDvarExtModML == 'stepf.t'){
      ratesBDvarExtTable <- matrix(data = c(0.1,0.01,0.01,0.01),nrow = 1,ncol = 4)
      colnames(ratesBDvarExtTable) <- c('Sp','Ext.Y0','Ext.Y1','Ext.tc')
      row.names(ratesBDvarExtTable) <- 'Rates'
      output$RateBDvarExtModML <- renderRHandsontable({rhandsontable(ratesBDvarExtTable, readOnly = F)})
    }
    
    if (input$distBDvarExtModML == 'exp.t'){
      ratesBDvarExtTable <- matrix(data = c(0.1,0.01,0.01),nrow = 1,ncol = 3)
      colnames(ratesBDvarExtTable) <- c('Sp','Ext.l', 'Ext.a')
      row.names(ratesBDvarExtTable) <- 'Rates'
      output$RateBDvarExtModML <- renderRHandsontable({rhandsontable(ratesBDvarExtTable, readOnly = F)})
    }
    
    if (input$distBDvarExtModML == 'sigmoid.t'){
      ratesBDvarExtTable <- matrix(data = c(0.1,0.01,0.01,0.01,0.01),nrow = 1,ncol = 5)
      colnames(ratesBDvarExtTable) <- c('Sp','Ext.Y0', 'Ext.Y1','Ext.tmid', 'Ext.r')
      row.names(ratesBDvarExtTable) <- 'Rates'
      output$RateBDvarExtModML <- renderRHandsontable({rhandsontable(ratesBDvarExtTable, readOnly = F)})
    }
    
    if (input$distBDvarExtModML == 'spline.t'){
      ratesBDvarExtTable <- matrix(data = c(0.1,0.01,0.01),nrow = 1,ncol = 3)
      colnames(ratesBDvarExtTable) <- c('Sp','Ext.Y0', 'Ext.Y1',)
      row.names(ratesBDvarExtTable) <- 'Rates'
      output$RateBDvarExtModML <- renderRHandsontable({rhandsontable(ratesBDvarExtTable, readOnly = F)})
    }
  })
  
  
  observeEvent(input$addBDvarExtModML,{
    DiverModANAVals$iterBDvarExt$rho <- as.numeric(input$fractBDvarExtModML)
    DiverModANAVals$iterBDvarExt$Distribution <- input$distBDvarExtModML
    DiverModANAVals$iterBDvarExt$Rates <- as.numeric(hot_to_r(input$RateBDvarExtModML))
    
    DiverModANAVals$BDvarExtList$model <- DiverModANAVals$iterBDvarExt
    
    DiverModANAVals$countBDvarExt <- DiverModANAVals$countBDvarExt + 1
    
    names(DiverModANAVals$BDvarExtList)[DiverModANAVals$countBDvarExt] <- paste('BDvarExt',DiverModANAVals$countBDvarExt, sep = '')
    
    DiverModANAVals$modelList <- c(DiverModANAVals$modelList , paste('BDvarExt',DiverModANAVals$countBDvarExt, sep = ''))
    
    DiverModANAVals$runObjModels$BDvarExt <- DiverModANAVals$BDvarExtList
    
    
    
    output$BDVarExMLDiverModANA <- renderPlot({
      
      ## set sequence of time intervals
      t<-seq(0,max(nodeHeights(treeModML())),length.out=100)
      par(mar=c(2.6,2.4,0.5,0.5),mgp = c(1.7, 0.7, 0))
      l=DiverModANAVals$iterBDvarExt$Rates[2]
      a=DiverModANAVals$iterBDvarExt$Rates[3]
      b<-l*exp(-a*t)
      d<-rep(DiverModANAVals$iterBDvarExt$Rates[1],length(t))
      ## plot curve
      plot(t,b,type="l",col="blue",
           ylim=c(0,max(DiverModANAVals$iterBDvarExt$Rates)),xlab="time",lwd=2,bty="l",
           las=1,cex.axis=0.6,cex.lab=0.8,
           ylab="rate")
      lines(t,d,col="red",lwd=2)})
    
  })
  
  
  #Temporal object to print in info panel
  # info:  models
  observeEvent(input$addBDvarExtModML, {
    DiverModANAVals$outputbox <- DiverModANAVals$runObjModels
    
    updateSelectInput(session = session,inputId = 'modelsFitModML',label = 'Models', choices = as.character(DiverModANAVals$modelList),selected = as.character( DiverModANAVals$modelList) )
  })
  
  
  # BDvarSpeExt Model
  
  observeEvent(input$distBDvarSpeExtModMLsp,{
    DiverModANAVals$runObjModels$BDvarSpeExt <- NULL
    
    #Speciation rate
    if (input$distBDvarSpeExtModMLsp == 'linear.t'){
      ratesBDvarSpeExtTablesp <- matrix(data = c(0.01,0.01),nrow = 1,ncol = 2)
      colnames(ratesBDvarSpeExtTablesp) <- c('Sp.c', 'Sp.m')
      row.names(ratesBDvarSpeExtTablesp) <- 'Rates'
      output$RateBDvarSpeExtModMLsp <- renderRHandsontable({rhandsontable(ratesBDvarSpeExtTablesp, readOnly = F)})
    }
    
    if (input$distBDvarSpeExtModMLsp == 'stepf.t'){
      ratesBDvarSpeExtTablesp <- matrix(data = c(0.01,0.01,0.01),nrow = 1,ncol = 3)
      colnames(ratesBDvarSpeExtTablesp) <- c('Sp.Y0', 'Sp.Y1', 'Sp.tc')
      row.names(ratesBDvarSpeExtTablesp) <- 'Rates'
      output$RateBDvarSpeExtModMLsp <- renderRHandsontable({rhandsontable(ratesBDvarSpeExtTablesp, readOnly = F)})
    }
    
    if (input$distBDvarSpeExtModMLsp == 'exp.t'){
      ratesBDvarSpeExtTablesp <- matrix(data = c(0.01,0.01),nrow = 1,ncol = 2)
      colnames(ratesBDvarSpeExtTablesp) <- c('Sp.l', 'Sp.a')
      row.names(ratesBDvarSpeExtTablesp) <- 'Rates'
      output$RateBDvarSpeExtModMLsp <- renderRHandsontable({rhandsontable(ratesBDvarSpeExtTablesp, readOnly = F)})
    }
    
    if (input$distBDvarSpeExtModMLsp == 'sigmoid.t'){
      ratesBDvarSpeExtTablesp <- matrix(data = c(0.01,0.01,0.01,0.01),nrow = 1,ncol = 4)
      colnames(ratesBDvarSpeExtTablesp) <- c('Sp.Y0', 'Sp.Y1','Sp.tmid', 'Sp.r')
      row.names(ratesBDvarSpeExtTablesp) <- 'Rates'
      output$RateBDvarSpeExtModMLsp <- renderRHandsontable({rhandsontable(ratesBDvarSpeExtTablesp, readOnly = F)})
    }
    
    if (input$distBDvarSpeExtModMLsp == 'spline.t'){
      ratesBDvarSpeExtTablesp <- matrix(data = c(0.01,0.01),nrow = 1,ncol = 2)
      colnames(ratesBDvarSpeExtTablesp) <- c('Sp.Y0', 'Sp.Y1')
      row.names(ratesBDvarSpeExtTablesp) <- 'Rates'
      output$RateBDvarSpeExtModMLsp <- renderRHandsontable({rhandsontable(ratesBDvarSpeExtTablesp, readOnly = F)})
    }
    
    
    
  })
  
  
  
  # Extinction rates
  
  observeEvent(input$distBDvarSpeExtModMLex, {
    
    #Extinction rates
    if (input$distBDvarSpeExtModMLex == 'linear.t'){
      ratesBDvarSpeExtTableex <- matrix(data = c(0.01,0.01),nrow = 1,ncol = 2)
      colnames(ratesBDvarSpeExtTableex) <- c('Ext.c', 'Ext.m')
      row.names(ratesBDvarSpeExtTableex) <- 'Rates'
      output$RateBDvarSpeExtModMLex <- renderRHandsontable({rhandsontable(ratesBDvarSpeExtTableex, readOnly = F)})
    }
    
    if (input$distBDvarSpeExtModMLex == 'stepf.t'){
      ratesBDvarSpeExtTableex <- matrix(data = c(0.01,0.01,0.01),nrow = 1,ncol = 3)
      colnames(ratesBDvarSpeExtTableex) <- c('Ext.Y0', 'Ext.Y1', 'Ext.tc')
      row.names(ratesBDvarSpeExtTableex) <- 'Rates'
      output$RateBDvarSpeExtModMLex <- renderRHandsontable({rhandsontable(ratesBDvarSpeExtTableex, readOnly = F)})
    }
    
    if (input$distBDvarSpeExtModMLex == 'exp.t'){
      ratesBDvarSpeExtTableex <- matrix(data = c(0.01,0.01),nrow = 1,ncol = 2)
      colnames(ratesBDvarSpeExtTableex) <- c('Ext.l', 'Ext.a')
      row.names(ratesBDvarSpeExtTableex) <- 'Rates'
      output$RateBDvarSpeExtModMLex <- renderRHandsontable({rhandsontable(ratesBDvarSpeExtTableex, readOnly = F)})
    }
    
    if (input$distBDvarSpeExtModMLex == 'sigmoid.t'){
      ratesBDvarSpeExtTableex <- matrix(data = c(0.01,0.01,0.01,0.01),nrow = 1,ncol = 4)
      colnames(ratesBDvarSpeExtTableex) <- c('Ext.Y0', 'Ext.Y1','Ext.tmid', 'Ext.r')
      row.names(ratesBDvarSpeExtTableex) <- 'Rates'
      output$RateBDvarSpeExtModMLex <- renderRHandsontable({rhandsontable(ratesBDvarExtTableex, readOnly = F)})
    }
    
    if (input$distBDvarSpeExtModMLex == 'spline.t'){
      ratesBDvarSpeExtTableex <- matrix(data = c(0.01,0.01),nrow = 1,ncol = 4)
      colnames(ratesBDvarSpeExtTableex) <- c('Ext.Y0', 'Ext.Y1')
      row.names(ratesBDvarSpeExtTableex) <- 'Rates'
      output$RateBDvarSpeExtModMLex <- renderRHandsontable({rhandsontable(ratesBDvarExtTableex, readOnly = F)})
    }
    
    
    
    
  })
  
  
  observeEvent(input$addBDvarSpeExtModML,{
    
    DiverModANAVals$iterBDvarSpeExt$rho <- as.numeric(input$fractBDvarSpeExtModML)
    DiverModANAVals$iterBDvarSpeExt$Dist.Speciation <- input$distBDvarSpeExtModMLsp
    DiverModANAVals$iterBDvarSpeExt$Rates.Speciation <- as.numeric(hot_to_r(input$RateBDvarSpeExtModMLsp))
    
    DiverModANAVals$iterBDvarSpeExt$Dist.Extiction <- input$distBDvarSpeExtModMLex
    DiverModANAVals$iterBDvarSpeExt$Rates.Extinction <- as.numeric(hot_to_r(input$RateBDvarSpeExtModMLex))
    
    DiverModANAVals$BDvarSpeExtList$model <- DiverModANAVals$iterBDvarSpeExt
    
    DiverModANAVals$countBDvarSpeExt <- DiverModANAVals$countBDvarSpeExt + 1
    
    names(DiverModANAVals$BDvarSpeExtList)[DiverModANAVals$countBDvarSpeExt] <- paste('BDvarSpeExt',DiverModANAVals$countBDvarSpeExt, sep = '')
    
    DiverModANAVals$modelList <- c(DiverModANAVals$modelList,paste('BDvarSpeExt',DiverModANAVals$countBDvarSpeExt, sep = ''))
    
    DiverModANAVals$runObjModels$BDvarSpeExt <- DiverModANAVals$BDvarSpeExtList
    
    
    
    output$BDVarSpExMLDiverModANA <- renderPlot({
      t<-seq(0,max(nodeHeights(treeModML())),length.out=100)
      par(mar=c(2.6,2.4,0.5,0.5),mgp = c(1.7, 0.7, 0))
      
      lambda.l=DiverModANAVals$iterBDvarSpeExt$Rates.Speciation[1]
      lambda.a=DiverModANAVals$iterBDvarSpeExt$Rates.Speciation[2]
      mu.l=DiverModANAVals$iterBDvarSpeExt$Rates.Extinction[1]
      mu.a=DiverModANAVals$iterBDvarSpeExt$Rates.Extinction[2]
      b<-lambda.l*exp(-lambda.a*t)
      d<-mu.l*exp(-mu.a*t)
      ## plot curve
      plot(t,b,type="l",col="blue",
           ylim=c(0,max(c(DiverModANAVals$iterBDvarSpeExt$Rates.Speciation,DiverModANAVals$iterBDvarSpeExt$Rates.Extinction))),xlab="time",lwd=2,bty="l",
           las=1,cex.axis=0.6,cex.lab=0.8,
           ylab="rate")
      lines(t,d,col="red",lwd=3)
    })
    
    
  })
  
  
  
  
  observeEvent(input$CladoDepenModML == T,{
    
    output$CladeSplitMLDiverModANA <- renderPlot({
      t<-seq(0,max(nodeHeights(treeModML())),length.out=100)
      par(mar=c(2.6,2.4,0.5,0.5),mgp = c(1.7, 0.7, 0))
      lambda.1=0.5
      lambda.2=1.5
      mu.1=0.3
      mu.2=0.9
      b1 <- rep(x = lambda.1, length(t))
      b2 <- rep(x = lambda.2, 49)
      d1 <- rep(x = mu.1, length(t))
      d2 <- rep(x = mu.2, 49)
      
      ## plot curve
      plot(t,b1,type="l",col="blue",
           ylim=c(0,1.6),xlab="time",lwd=2,bty="l",
           las=1,cex.axis=0.6,cex.lab=0.8,
           ylab="rate")
      lines(t,d1,col="red",lwd=2)
      
      lines(b2,col="blue3",lwd=2,lty="dotted")
      lines(d2,col="red3",lwd=2,lty="dotted")
      
    })
    
    
  })
  
  
  #Temporal object to print in info panel
  # info:  models
  observeEvent(input$addBDvarSpeExtModML, {
    
    
    DiverModANAVals$outputbox <- DiverModANAVals$runObjModels
    
    updateSelectInput(session = session,inputId = 'modelsFitModML',label = 'Models', choices = as.character(DiverModANAVals$modelList),selected = as.character( DiverModANAVals$modelList) )
  })
  
  
  # Diver-dependent model
  
  observeEvent(input$addDiverDepentModML,{
    
    if (input$modelDiverModANAVals == '1'){
      
      DiverModANAVals$iterDiverDepentModML <- c("linear dependence in speciation rate with parameter K (= diversity where speciation = extinction)")
      
    }else if(input$modelDiverModANAVals == '1.3'){
      
      DiverModANAVals$iterDiverDepentModML <- c("linear dependence in speciation rate with parameter K' (= diversity where speciation = 0)")
      
    }else if(input$modelDiverModANAVals == '1.4'){
      
      DiverModANAVals$iterDiverDepentModML <- c(" positive diversity-dependence in speciation rate with parameter K' (= diversity where speciation rate reaches half its maximum); lambda = lambda0 * S/(S + K') where S is species richness")
      
    }else if(input$modelDiverModANAVals == '1.5'){
      
      DiverModANAVals$iterDiverDepentModML <- c("positive and negative dependence in speciation rate with parameter K' (= diversity where speciation = 0); lambda = lambda0 * S/K' * (1 - S/K') where S is species richness")
      
      
    }else if(input$modelDiverModANAVals == '2'){
      
      DiverModANAVals$iterDiverDepentModML <- c("exponential dependence in speciation rate with parameter K (= diversity where speciation = extinction)")
      
    }else if(input$modelDiverModANAVals == '2.1'){
      
      DiverModANAVals$iterDiverDepentModML <- c("variant of exponential dependence in speciation rate with offset at infinity")
      
    }else if(input$modelDiverModANAVals == '2.2'){
      
      DiverModANAVals$iterDiverDepentModML <- c("1/n dependence in speciation rate")
      
    }else if(input$modelDiverModANAVals == '2.3'){
      
      DiverModANAVals$iterDiverDepentModML <- c("exponential dependence in speciation rate with parameter x (= exponent)")
      
    }else if(input$modelDiverModANAVals == '3'){
      
      DiverModANAVals$iterDiverDepentModML <- c("linear dependence in extinction rate ")
      
    }else if(input$modelDiverModANAVals == '4'){
      
      DiverModANAVals$iterDiverDepentModML <- c("exponential dependence in extinction rate")
      
    }else if(input$modelDiverModANAVals == '4.1'){
      
      DiverModANAVals$iterDiverDepentModML <- c("variant of exponential dependence in extinction rate with offset at infinity")
      
    }else if(input$modelDiverModANAVals == '4.2'){
      
      DiverModANAVals$iterDiverDepentModML <- c("1/n dependence in extinction rate with offset at infinity ")
      
    }else if(input$modelDiverModANAVals == '5'){
      
      DiverModANAVals$iterDiverDepentModML <- c("linear dependence in speciation and extinction rate")
      
    }
    
    DiverModANAVals$DiverDepentModMLList$model <- DiverModANAVals$iterDiverDepentModML
    
    DiverModANAVals$countDiverDepentModML <- DiverModANAVals$countDiverDepentModML + 1
    
    names(DiverModANAVals$DiverDepentModMLList)[DiverModANAVals$countDiverDepentModML] <- paste('DiverDepentModel',DiverModANAVals$countDiverDepentModML, sep = '')
    
    DiverModANAVals$modelList <- c(DiverModANAVals$modelList,paste('DiverDepentModel',DiverModANAVals$countDiverDepentModML, sep = ''))
    
    DiverModANAVals$runObjModels$DiverDepentModel <- DiverModANAVals$DiverDepentModMLList
    
    
    
    
    
  })
  
  
  #Temporal object to print in info panel
  # info:  models
  observeEvent(input$addDiverDepentModML, {
    DiverModANAVals$outputbox <- DiverModANAVals$runObjModels
    
    updateSelectInput(session = session,inputId = 'modelsFitModML',label = 'Models', choices = as.character( DiverModANAVals$modelList),selected = as.character( DiverModANAVals$modelList))
  })
  
  
  
  
  
  
  
  
  ### Running models
  observeEvent(input$ModelRunModML,{
    
    
    # ##### Fitting Yule models
    
    
    yulemodels <- which(names(DiverModANAVals$runObjModels$Yule) %in%  input$modelsFitModML)
    
    
    if (!length(yulemodels) == 0){
      if (input$optModML == 'optim'){
        # yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(input$fractYuleModML), unresolved = NULL)
        # fityule <- find.mle(func = yule, x.init= as.numeric(input$BrateYuleModML), method='optim', control = list(optim.method= input$optimModML))
        #
        for (i in 1:length(yulemodels)){
          yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(DiverModANAVals$runObjModels$Yule[[yulemodels[i]]]$rho[1]), unresolved = NULL)
          fityule <- find.mle(func = yule, x.init= as.numeric(DiverModANAVals$runObjModels$Yule[[yulemodels[i]]]$rate[1]),method='optim', control = list(optim.method= input$optimModML))
          
          DiverModANAVals$iterYuleResult <- fityule
          
          DiverModANAVals$ResultYuleList$result <- DiverModANAVals$iterYuleResult
          
          DiverModANAVals$countYuleResult <- DiverModANAVals$countYuleResult + 1
          
          names(DiverModANAVals$ResultYuleList)[DiverModANAVals$countYuleResult] <- names(DiverModANAVals$runObjModels$Yule)[yulemodels[i]]
          
          DiverModANAVals$Result$YuleResults  <- DiverModANAVals$ResultYuleList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      } else if ( input$optModML == 'minqa'){
        # yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(input$fractYuleModML), unresolved = NULL)
        # fityule <- find.mle(func = yule, x.init= as.numeric(input$BrateYuleModML), method='minqa', control = list(minqa.method= input$minqaModML))
        #
        for (i in 1:length(yulemodels)){
          yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(DiverModANAVals$runObjModels$Yule[[yulemodels[i]]]$rho[1]), unresolved = NULL)
          fityule <- find.mle(func = yule, x.init= as.numeric(DiverModANAVals$runObjModels$Yule[[yulemodels[i]]]$rate[1]),method='minqa', control = list(minqa.method= input$minqaModML))
          
          DiverModANAVals$iterYuleResult <- fityule
          
          DiverModANAVals$ResultYuleList$result <- DiverModANAVals$iterYuleResult
          
          DiverModANAVals$countYuleResult <- DiverModANAVals$countYuleResult + 1
          
          names(DiverModANAVals$ResultYuleList)[DiverModANAVals$countYuleResult] <- names(DiverModANAVals$runObjModels$Yule)[yulemodels[i]]
          
          DiverModANAVals$Result$YuleResults  <- DiverModANAVals$ResultYuleList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      } else {
        # yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(input$fractYuleModML), unresolved = NULL)
        # fityule <- find.mle(func = yule, x.init= as.numeric(input$BrateYuleModML), method= input$optModML)
        #
        for (i in 1:length(yulemodels)){
          yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(DiverModANAVals$runObjModels$Yule[[yulemodels[i]]]$rho[1]), unresolved = NULL)
          fityule <- find.mle(func = yule, x.init= as.numeric(DiverModANAVals$runObjModels$Yule[[yulemodels[i]]]$rate[1]),method= input$optModML)
          
          DiverModANAVals$iterYuleResult <- fityule
          
          DiverModANAVals$ResultYuleList$result <- DiverModANAVals$iterYuleResult
          
          DiverModANAVals$countYuleResult <- DiverModANAVals$countYuleResult + 1
          
          names(DiverModANAVals$ResultYuleList)[DiverModANAVals$countYuleResult] <- names(DiverModANAVals$runObjModels$Yule)[yulemodels[i]]
          
          DiverModANAVals$Result$YuleResults  <- DiverModANAVals$ResultYuleList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      }

    }
    
    
    
    ##### Fitting BD models
    
    
    BDmodels <- which(names(DiverModANAVals$runObjModels$BD) %in%  input$modelsFitModML)
    
    if (!length(BDmodels) == 0){
      if (input$optModML == 'optim'){
        for (i in 1:length(BDmodels)){
          BD <-make.bd(tree = treeModML(), sampling.f = as.numeric(DiverModANAVals$runObjModels$BD[[BDmodels[i]]]$rho[1]), unresolved = NULL)
          fitBD <- find.mle(func = BD, x.init= as.numeric(c(DiverModANAVals$runObjModels$BD[[BDmodels[i]]]$Rates[1],DiverModANAVals$runObjModels$BD[[BDmodels[i]]]$Rates[2])),method='optim', control = list(optim.method= input$optimModML))
          
          DiverModANAVals$iterBDResult <- fitBD
          
          DiverModANAVals$ResultBDList$result <- DiverModANAVals$iterBDResult
          
          DiverModANAVals$countBDResult <- DiverModANAVals$countBDResult + 1
          
          names(DiverModANAVals$ResultBDList)[DiverModANAVals$countBDResult] <- names(DiverModANAVals$runObjModels$BD)[BDmodels[i]]
          
          DiverModANAVals$Result$BDResults  <- DiverModANAVals$ResultBDList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      } else if ( input$optModML == 'minqa'){
        # yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(input$fractYuleModML), unresolved = NULL)
        # fityule <- find.mle(func = yule, x.init= as.numeric(input$BrateYuleModML), method='minqa', control = list(minqa.method= input$minqaModML))
        #
        for (i in 1:length(BDmodels)){
          BD <-make.bd(tree = treeModML(), sampling.f = as.numeric(DiverModANAVals$runObjModels$BD[[BDmodels[i]]]$rho[1]), unresolved = NULL)
          fitBD <- find.mle(func = BD, x.init= as.numeric(c(DiverModANAVals$runObjModels$BD[[BDmodels[i]]]$Rates[1],DiverModANAVals$runObjModels$BD[[BDmodels[i]]]$Rates[2])), method='minqa', control = list(minqa.method= input$minqaModML))
          
          DiverModANAVals$iterBDResult <- fitBD
          
          DiverModANAVals$ResultBDList$result <- DiverModANAVals$iterBDResult
          
          DiverModANAVals$countBDResult <- DiverModANAVals$countBDResult + 1
          
          names(DiverModANAVals$ResultBDList)[DiverModANAVals$countBDResult] <- names(DiverModANAVals$runObjModels$BD)[BDmodels[i]]
          
          DiverModANAVals$Result$BDResults  <- DiverModANAVals$ResultBDList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      } else {
        # yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(input$fractYuleModML), unresolved = NULL)
        # fityule <- find.mle(func = yule, x.init= as.numeric(input$BrateYuleModML), method= input$optModML)
        #
        for (i in 1:length(BDmodels)){
          BD <-make.bd(tree = treeModML(), sampling.f = as.numeric(DiverModANAVals$runObjModels$BD[[BDmodels[i]]]$rho[1]), unresolved = NULL)
          fitBD <- find.mle(func = BD, x.init= as.numeric(c(DiverModANAVals$runObjModels$BD[[BDmodels[i]]]$Rates[1],DiverModANAVals$runObjModels$BD[[BDmodels[i]]]$Rates[2])),method= input$optModML)
          
          DiverModANAVals$iterBDResult <- fitBD
          
          DiverModANAVals$ResultBDList$result <- DiverModANAVals$iterBDResult
          
          DiverModANAVals$countBDResult <- DiverModANAVals$countBDResult + 1
          
          names(DiverModANAVals$ResultBDList)[DiverModANAVals$countBDResult] <- names(DiverModANAVals$runObjModels$BD)[BDmodels[i]]
          
          DiverModANAVals$Result$BDResults  <- DiverModANAVals$ResultBDList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      }
      
    }
    
    
    
    #### Fitting BDvarSp models
    
    
    BDvarSpemodels <- which(names(DiverModANAVals$runObjModels$BDvarSpe) %in%  input$modelsFitModML)
    
    if (!length(BDvarSpemodels) == 0){
      
      if (input$optModML == 'optim'){
        for (i in 1:length(BDvarSpemodels)){
          BDvarSpe <-make.bd.t(tree = treeModML(),
                               sampling.f = as.numeric(DiverModANAVals$runObjModels$BDvarSpe[[BDvarSpemodels[i]]]$rho[1]),
                               unresolved = NULL,
                               functions = c(DiverModANAVals$runObjModels$BDvarSpe[[BDvarSpemodels[i]]]$Distribution[1], 'constant.t'))
          
          
          fitBDvarSpe <- find.mle(func = BDvarSpe,
                                  x.init= as.numeric(c(DiverModANAVals$runObjModels$BDvarSpe[[BDvarSpemodels[i]]]$Rates)),method='optim', control = list(optim.method= input$optimModML))
          
          DiverModANAVals$iterBDvarSpeResult <- fitBDvarSpe
          
          DiverModANAVals$ResultBDvarSpeList$result <- DiverModANAVals$iterBDvarSpeResult
          
          DiverModANAVals$countBDvarSpeResult <- DiverModANAVals$countBDvarSpeResult + 1
          
          names(DiverModANAVals$ResultBDvarSpeList)[DiverModANAVals$countBDvarSpeResult] <- names(DiverModANAVals$runObjModels$BDvarSpe)[BDvarSpemodels[i]]
          
          DiverModANAVals$Result$BDvarSpeResults  <- DiverModANAVals$ResultBDvarSpeList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      } else if ( input$optModML == 'minqa'){
        # yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(input$fractYuleModML), unresolved = NULL)
        # fityule <- find.mle(func = yule, x.init= as.numeric(input$BrateYuleModML), method='minqa', control = list(minqa.method= input$minqaModML))
        #
        for (i in 1:length(BDvarSpemodels)){
          BDvarSpe <-make.bd.t(tree = treeModML(),
                               sampling.f = as.numeric(DiverModANAVals$runObjModels$BDvarSpe[[BDvarSpemodels[i]]]$rho[1]),
                               unresolved = NULL,
                               functions = c(DiverModANAVals$runObjModels$BDvarSpe[[BDvarSpemodels[i]]]$Distribution[1], 'constant.t'))
          
          
          fitBDvarSpe <- find.mle(func = BDvarSpe,
                                  x.init= as.numeric(c(DiverModANAVals$runObjModels$BDvarSpe[[BDvarSpemodels[i]]]$Rates)),method='minqa', control = list(minqa.method= input$minqaModML))
          
          DiverModANAVals$iterBDvarSpeResult <- fitBDvarSpe
          
          DiverModANAVals$ResultBDvarSpeList$result <- DiverModANAVals$iterBDvarSpeResult
          
          DiverModANAVals$countBDvarSpeResult <- DiverModANAVals$countBDvarSpeResult + 1
          
          names(DiverModANAVals$ResultBDvarSpeList)[DiverModANAVals$countBDvarSpeResult] <- names(DiverModANAVals$runObjModels$BDvarSpe)[BDvarSpemodels[i]]
          
          DiverModANAVals$Result$BDvarSpeResults  <- DiverModANAVals$ResultBDvarSpeList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      } else {
        # yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(input$fractYuleModML), unresolved = NULL)
        # fityule <- find.mle(func = yule, x.init= as.numeric(input$BrateYuleModML), method= input$optModML)
        #
        for (i in 1:length(BDvarSpemodels)){
          BDvarSpe <-make.bd.t(tree = treeModML(),
                               sampling.f = as.numeric(DiverModANAVals$runObjModels$BDvarSpe[[BDvarSpemodels[i]]]$rho[1]),
                               unresolved = NULL,
                               functions = c(DiverModANAVals$runObjModels$BDvarSpe[[BDvarSpemodels[i]]]$Distribution[1], 'constant.t'))
          
          
          fitBDvarSpe <- find.mle(func = BDvarSpe,
                                  x.init= as.numeric(c(DiverModANAVals$runObjModels$BDvarSpe[[BDvarSpemodels[i]]]$Rates)),method= input$optModML)
          
          DiverModANAVals$iterBDvarSpeResult <- fitBDvarSpe
          
          DiverModANAVals$ResultBDvarSpeList$result <- DiverModANAVals$iterBDvarSpeResult
          
          DiverModANAVals$countBDvarSpeResult <- DiverModANAVals$countBDvarSpeResult + 1
          
          names(DiverModANAVals$ResultBDvarSpeList)[DiverModANAVals$countBDvarSpeResult] <- names(DiverModANAVals$runObjModels$BDvarSpe)[BDvarSpemodels[i]]
          
          DiverModANAVals$Result$BDvarSpeResults  <- DiverModANAVals$ResultBDvarSpeList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      }
      
    }
    
    
    
    #### Fitting BDvarExt models
    
    
    BDvarExtmodels <- which(names(DiverModANAVals$runObjModels$BDvarExt) %in%  input$modelsFitModML)
    
    if (!length(BDvarExtmodels) == 0){
      
      if (input$optModML == 'optim'){
        for (i in 1:length(BDvarExtmodels)){
          BDvarExt <-make.bd.t(tree = treeModML(),
                               sampling.f = as.numeric(DiverModANAVals$runObjModels$BDvarExt[[BDvarExtmodels[i]]]$rho[1]),
                               unresolved = NULL,
                               functions = c('constant.t', DiverModANAVals$runObjModels$BDvarExt[[BDvarExtmodels[i]]]$Distribution[1]))
          
          
          fitBDvarExt <- find.mle(func = BDvarExt,
                                  x.init= as.numeric(c(DiverModANAVals$runObjModels$BDvarExt[[BDvarExtmodels[i]]]$Rates)),method='optim', control = list(optim.method= input$optimModML))
          
          DiverModANAVals$iterBDvarExtResult <- fitBDvarExt
          
          DiverModANAVals$ResultBDvarExtList$result <- DiverModANAVals$iterBDvarExtResult
          
          DiverModANAVals$countBDvarExtResult <- DiverModANAVals$countBDvarExtResult + 1
          
          names(DiverModANAVals$ResultBDvarExtList)[DiverModANAVals$countBDvarExtResult] <- names(DiverModANAVals$runObjModels$BDvarExt)[BDvarExtmodels[i]]
          
          DiverModANAVals$Result$BDvarExtResults  <- DiverModANAVals$ResultBDvarExtList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      } else if ( input$optModML == 'minqa'){
        # yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(input$fractYuleModML), unresolved = NULL)
        # fityule <- find.mle(func = yule, x.init= as.numeric(input$BrateYuleModML), method='minqa', control = list(minqa.method= input$minqaModML))
        #
        for (i in 1:length(BDvarExtmodels)){
          BDvarExt <-make.bd.t(tree = treeModML(),
                               sampling.f = as.numeric(DiverModANAVals$runObjModels$BDvarExt[[BDvarExtmodels[i]]]$rho[1]),
                               unresolved = NULL,
                               functions = c('constant.t', DiverModANAVals$runObjModels$BDvarExt[[BDvarExtmodels[i]]]$Distribution[1]))
          
          
          fitBDvarExt <- find.mle(func = BDvarExt,
                                  x.init= as.numeric(c(DiverModANAVals$runObjModels$BDvarExt[[BDvarExtmodels[i]]]$Rates)),method='minqa', control = list(minqa.method= input$minqaModML))
          
          DiverModANAVals$iterBDvarExtResult <- fitBDvarExt
          
          DiverModANAVals$ResultBDvarExtList$result <- DiverModANAVals$iterBDvarExtResult
          
          DiverModANAVals$countBDvarExtResult <- DiverModANAVals$countBDvarExtResult + 1
          
          names(DiverModANAVals$ResultBDvarExtList)[DiverModANAVals$countBDvarExtResult] <- names(DiverModANAVals$runObjModels$BDvarExt)[BDvarExtmodels[i]]
          
          DiverModANAVals$Result$BDvarExtResults  <- DiverModANAVals$ResultBDvarExtList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      } else {
        # yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(input$fractYuleModML), unresolved = NULL)
        # fityule <- find.mle(func = yule, x.init= as.numeric(input$BrateYuleModML), method= input$optModML)
        #
        for (i in 1:length(BDvarExtmodels)){
          BDvarExt <-make.bd.t(tree = treeModML(),
                               sampling.f = as.numeric(DiverModANAVals$runObjModels$BDvarExt[[BDvarExtmodels[i]]]$rho[1]),
                               unresolved = NULL,
                               functions = c('constant.t', DiverModANAVals$runObjModels$BDvarExt[[BDvarExtmodels[i]]]$Distribution[1]))
          
          
          fitBDvarExt <- find.mle(func = BDvarExt,
                                  x.init= as.numeric(c(DiverModANAVals$runObjModels$BDvarExt[[BDvarExtmodels[i]]]$Rates)),method= input$optModML)
          
          DiverModANAVals$iterBDvarExtResult <- fitBDvarExt
          
          DiverModANAVals$ResultBDvarExtList$result <- DiverModANAVals$iterBDvarExtResult
          
          DiverModANAVals$countBDvarExtResult <- DiverModANAVals$countBDvarExtResult + 1
          
          names(DiverModANAVals$ResultBDvarExtList)[DiverModANAVals$countBDvarExtResult] <- names(DiverModANAVals$runObjModels$BDvarExt)[BDvarExtmodels[i]]
          
          DiverModANAVals$Result$BDvarExtResults  <- DiverModANAVals$ResultBDvarExtList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      }
      
    }
    
    
    
    #### Fitting BDvarSpeExt models
    
    
    BDvarSpeExtmodels <- which(names(DiverModANAVals$runObjModels$BDvarSpeExt) %in%  input$modelsFitModML)
    
    if (!length(BDvarSpeExtmodels) == 0){
      
      if (input$optModML == 'optim'){
        for (i in 1:length(BDvarSpeExtmodels)){
          BDvarSpeExt <-make.bd.t(tree = treeModML(),
                                  sampling.f = as.numeric(DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$rho[1]),
                                  unresolved = NULL,
                                  functions = c(DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$Dist.Speciation[1], DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$Dist.Extinction[1]))
          
          
          fitBDvarSpeExt <- find.mle(func = BDvarSpeExt,
                                     x.init= as.numeric(c(DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$Rates.Speciation,DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$Rates.Extinction)),method='optim', control = list(optim.method= input$optimModML))
          
          DiverModANAVals$iterBDvarSpeExtResult <- fitBDvarSpeExt
          
          DiverModANAVals$ResultBDvarSpeExtList$result <- DiverModANAVals$iterBDvarSpeExtResult
          
          DiverModANAVals$countBDvarSpeExtResult <- DiverModANAVals$countBDvarSpeExtResult + 1
          
          names(DiverModANAVals$ResultBDvarSpeExtList)[DiverModANAVals$countBDvarSpeExtResult] <- names(DiverModANAVals$runObjModels$BDvarSpeExt)[BDvarSpeExtmodels[i]]
          
          DiverModANAVals$Result$BDvarSpeExtResults  <- DiverModANAVals$ResultBDvarSpeExtList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      } else if ( input$optModML == 'minqa'){
        # yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(input$fractYuleModML), unresolved = NULL)
        # fityule <- find.mle(func = yule, x.init= as.numeric(input$BrateYuleModML), method='minqa', control = list(minqa.method= input$minqaModML))
        #
        for (i in 1:length(BDvarSpeExtmodels)){
          BDvarSpeExt <-make.bd.t(tree = treeModML(),
                                  sampling.f = as.numeric(DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$rho[1]),
                                  unresolved = NULL,
                                  functions = c(DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$Dist.Speciation[1], DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$Dist.Extinction[1]))
          
          
          fitBDvarSpeExt <- find.mle(func = BDvarSpeExt,
                                     x.init= as.numeric(c(DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$Rates.Speciation,DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$Rates.Extinction)),method='minqa', control = list(minqa.method= input$minqaModML))
          
          DiverModANAVals$iterBDvarSpeExtResult <- fitBDvarSpeExt
          
          DiverModANAVals$ResultBDvarSpeExtList$result <- DiverModANAVals$iterBDvarSpeExtResult
          
          DiverModANAVals$countBDvarSpeExtResult <- DiverModANAVals$countBDvarSpeExtResult + 1
          
          names(DiverModANAVals$ResultBDvarSpeExtList)[DiverModANAVals$countBDvarSpeExtResult] <- names(DiverModANAVals$runObjModels$BDvarSpeExt)[BDvarSpeExtmodels[i]]
          
          DiverModANAVals$Result$BDvarSpeExtResults  <- DiverModANAVals$ResultBDvarSpeExtList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      } else {
        # yule <-make.yule(tree = treeModML(), sampling.f = as.numeric(input$fractYuleModML), unresolved = NULL)
        # fityule <- find.mle(func = yule, x.init= as.numeric(input$BrateYuleModML), method= input$optModML)
        #
        for (i in 1:length(BDvarSpeExtmodels)){
          BDvarSpeExt <-make.bd.t(tree = treeModML(),
                                  sampling.f = as.numeric(DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$rho[1]),
                                  unresolved = NULL,
                                  functions = c(DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$Dist.Speciation[1], DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$Dist.Extinction[1]))
          
          
          fitBDvarSpeExt <- find.mle(func = BDvarSpeExt,
                                     x.init= as.numeric(c(DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$Rates.Speciation,DiverModANAVals$runObjModels$BDvarSpeExt[[BDvarSpeExtmodels[i]]]$Rates.Extinction)),method= input$optModML)
          
          DiverModANAVals$iterBDvarSpeExtResult <- fitBDvarSpeExt
          
          DiverModANAVals$ResultBDvarSpeExtList$result <- DiverModANAVals$iterBDvarSpeExtResult
          
          DiverModANAVals$countBDvarSpeExtResult <- DiverModANAVals$countBDvarSpeExtResult + 1
          
          names(DiverModANAVals$ResultBDvarSpeExtList)[DiverModANAVals$countBDvarSpeExtResult] <- names(DiverModANAVals$runObjModels$BDvarSpeExt)[BDvarSpeExtmodels[i]]
          
          DiverModANAVals$Result$BDvarSpeExtResults  <- DiverModANAVals$ResultBDvarSpeExtList
          
          DiverModANAVals$outputbox <- DiverModANAVals$Result
        }
      }
      
    }
    
    #### Fit DiverDepentModel
    
    DiverDepentModelmodels <- which(names(DiverModANAVals$runObjModels$DiverDepentModel) %in%  input$modelsFitModML)
    
    if (!length(DiverDepentModelmodels) == 0){
      
      branchingTime <- branching.times(treeModML())
      
      for (i in 1:length(DiverDepentModelmodels)){
        
        bd_res_ddd <- bd_ML(brts = branchingTime, missnumspec = as.numeric(input$missnumDiverModANA), cond = as.numeric(input$modelDiverModANA), btorph = 0,optimmethod = input$optModMLDDD)
        
        DiverModANAVals$iterDiverDepentModelResult <- bd_res_ddd
        
        DiverModANAVals$ResultDiverDepentModelList$result <- DiverModANAVals$iterDiverDepentModelResult
        
        DiverModANAVals$countDiverDepentModelResult <- DiverModANAVals$countDiverDepentModelResult + 1
        
        names(DiverModANAVals$ResultDiverDepentModelList)[DiverModANAVals$countDiverDepentModelResult] <- names(DiverModANAVals$runObjModels$DiverDepentModel)[DiverDepentModelmodels[i]]
        
        DiverModANAVals$Result$DiverDepentModelResults  <- DiverModANAVals$ResultDiverDepentModelList 
        
        DiverModANAVals$outputbox <- DiverModANAVals$Result
      }
      
      #DiverModANAVals$runObjModels$DiverDepentModel
      
      
    }
  })
  
  
  
  
  
  
  
  # #Temporal object to print in info panel
  # # info:  models
  # observeEvent(input$ModelRunModML, {
  #   
  #   
  #   DiverModANAValsVals$outputbox <- DiverModANAVals$runObjModels
  #   
  # })
  
  ####################################### Messages ##########################################################
  
  #--------------------------------- Message in error box-------------------------
  output$messDiverModANA <- renderPrint({
    print(DiverModANAVals$errorbox)
  })
  

  #--------------------------------- Output box-------------------------
  output$outputDiverModANA <- renderPrint({
    req(DiverModANAVals$outputbox)
    print(DiverModANAVals$outputbox)
  })
  
  ####################################### Reset Data Panel Diver Models 
  
  observeEvent(input$ButtonResetDiverModDT, {
    if(is.null(Treediver()))return()
    
    DPDiverModVals$outputbox <- NULL
    DPDiverModVals$errorbox <- "No messages"
    DPDiverModVals$strbox <- NULL
    DPDiverModVals$ultrametric  <- NULL
    
    # Tree
    #DPDiverModVals$Treediver 
    # DPDiverModVals$Treediver2 <- NULL
    # DPDiverModVals$Treediver3 <- NULL
    
    reset("DiverModDTReset")
    #updateActionButton(session,inputId = "importTreeDiver",label = NULL,icon =icon(name = "upload"))
    #session$sendCustomMessage(session,type = "resetFileInputHandler", "fileTreeDiver")
    
    
  })
  
  
  
  
  ###########################################################################################################
  #
  #                                                 R CODE
  #
  ###########################################################################################################
  
  # Start Rcode panel
  output$CodePanel <- renderPrint({
   
    
    
    #--------------------------------- Rmarkdown-------------------------
    
    cat("--- \n", sep="")
    cat("title: 'Diversification Analyses' \n", sep="")
    cat("output: html_document \n", sep="")
    cat("date: '",Sys.Date(),"' \n", sep="")
    cat("--- \n", sep="")
    
    cat("\n", sep="")
    cat("\n", sep="")
    
    cat("```{r setup, include=FALSE}\n", sep="")
    cat("knitr::opts_chunk$set(echo = TRUE) \n", sep="")
    cat("``` \n", sep="")
    
    cat("\n", sep="")
    cat("\n", sep="")
    
    
    cat("##--------------------------------- Libraries-------------------------\n", sep="")
    
    cat("\n", sep="")
    cat("\n", sep="")
    
    cat("library(phytools) \n", sep="")
    cat("library(ape)  \n", sep="")
    
    cat("\n", sep="")
    cat("\n", sep="")
    
    cat("##--------------------------------- Load tree -------------------------\n", sep="")
    
    cat("\n", sep="")
    cat("\n", sep="")
    
    
    
    
    #--------------------------------- upload tree-------------------------
    if(input$importTreelttDT == 1) {
      
      if (input$ExamplttDT == T){
        cat(paste("```{r chunk 1})\n"), sep="")
        cat("tree <- readRDS(file = 'Example.RDS') \n", sep="" )
        
        cat("``` \n", sep="")
        
        cat("\n", sep="")
        cat("\n", sep="")
      }else{
        req(input$fileTreelttDT)
        
        if (is.nexus(input$fileTreelttDT$datapath) == T) {
          cat(paste("```{r chunk 2})\n"), sep="")
          cat(paste("tree <- read.nexus(file ='Tree.nex') \n" ), sep="" )
          cat("``` \n", sep="")
          
          cat("\n", sep="")
          cat("\n", sep="")
        } else {
          cat(paste("```{r chunk 3})\n"), sep="")
          cat(paste("tree <- read.tree(file = 'Tree.tre') \n" ), sep="" )
          cat("``` \n", sep="")
          
          cat("\n", sep="")
          cat("\n", sep="")
        }
      }
    }
    
    
    
    
    
    
    
    
     
    
    cat("##--------------------------------- Plot tree-------------------------\n", sep="")
    
    cat("\n", sep="")
    cat("\n", sep="")
    
    cat(paste("```{r chunk 4 })\n", sep=""))
    if(!is.null(TreelttDT)){
      cat("plot.phylo(tree, show.tip.label = T,
                           cex = 0.8, use.edge.length = T,
                           edge.width = 0.8,edge.color = 'grey40') \n", sep="")
    }
    
    cat("``` \n", sep="")
    
    cat("\n", sep="")
    cat("\n", sep="")
    
    cat("##--------------------------------- Ultrametric process-------------------------\n", sep="")
    
    cat("\n", sep="")
    cat("\n", sep="")
    
    cat(paste("```{r chunk 5 })\n", sep=""))
    
    cat("## ask if the tree is ultrametirc \n", sep="")
    
    if (input$ultrlttDT){
      cat(" isUltra <- is.ultrametric(tree) \n", sep="")
    }
    cat("``` \n", sep="")
    
    cat("\n", sep="")
    cat("\n", sep="")
    
    cat(paste("```{r chunk 6 })\n", sep=""))
    
    if (ultrametriclttDT() == F) {
      cat("## Calculate Coefficient of vrariation among branches, to decide if to use round or recalibrate \n", sep="")
      
      cat( "h <- diag(vcv(tree))\n", sep="")
      
      cat("cvBranch <- round(sd(h)/mean(h),digits = 2)*100\n", sep="")
      
      cat(" print(paste(isUltra , '-', 'Coeffient of variation among branches:', cvBranch, '%' ))\n", sep="")
    }else{
      cat("## Is ultrametric? \n", sep="")
      
      cat(" print(paste(isUltra , 'Ultrametric tree' ))\n", sep="")
    }
    
    cat("``` \n", sep="")
    
    cat("\n", sep="")
    cat("\n", sep="")
    
    
    
    
    if (input$importbytipsCSVlttDT |  input$importAgeCSVlttDT){
      cat(paste("```{r chunk", (lttDTVals$RcodeCount <- lttDTVals$RcodeCount +1) ,"})\n", sep=""))
      cat("## Load nodes and ages (min and max) \n", sep="")
      
      cat(" tab1 <- read.csv(file = calibra.csv ,header = T)\n", sep="")
      
      
      cat("``` \n", sep="")
      
      cat("\n", sep="")
      cat("\n", sep="")
    }
    
    
    
    
    
    
    if(input$ButtonUltralttDT == T){
      cat(paste("```{r chunk 7 })\n", sep=""))
      
      if  (input$frcUltButtlttDT == 'roundlttDT'){
        cat("## Round branch lengths \n", sep="")
        
        cat(paste("tree2 <- force.ultrametric(tree = tree,method =", input$methodRoundlttDT,"\n"), sep="")
        
      }else if (input$frcUltButtlttDT == 'chronoslttDT'){
        cat("## Recalibrate \n", sep="")
        
        if (input$ModelsCallttDT == "discrete"){
          cat(paste("makeCal <- makeChronosCalib(phy = tree,",
                    "node = tab1[,1],",
                    "age.min = tab1[,2] ",
                    "age.max = tab1[,3]",
                    "interactive = F,",
                    "soft.bounds = F)","\n"), sep="")
          
          cat(paste("controlsCal <- chronos.control(tol =", as.numeric(DPDiverModVals$tolCal),",",
                    "iter.max = ",as.numeric(DPDiverModVals$itermaxCal),",",
                    "eval.max =", as.numeric(DPDiverModVals$evalmax),",",
                    "nb.rate.cat =", as.numeric(input$nbratecaldivermod),",",
                    "epsilon =", as.numeric(DPDiverModVals$epsilonCal),")","\n"), sep="")
          
          cat(paste("tree2 <- chronos(Treediver(),model = 'discrete',",
                    "lambda = ",as.numeric(input$lambdaChronosDiverDT),",",
                    "calibration = makeCal,",",",
                    "control = controlsCal","\n"), sep="")
          
        }else if(input$ModelsCallttDT == "clock"){
          
          cat(paste("makeCal <- makeChronosCalib(phy = tree,",
                    "node = tab1[,1],",
                    "age.min = tab1[,2] ",
                    "age.max = tab1[,3]",
                    "interactive = F,",
                    "soft.bounds = F)","\n"), sep="")
          
          cat(paste("controlsCal <- chronos.control(tol =", as.numeric(DPDiverModVals$tolCal),",",
                    "iter.max = ",as.numeric(DPDiverModVals$itermaxCal),",",
                    "eval.max =", as.numeric(DPDiverModVals$evalmax),",",
                    "nb.rate.cat = 1",
                    "epsilon =", as.numeric(DPDiverModVals$epsilonCal),")","\n"), sep="")
          
          cat(paste("tree2 <- chronos(Treediver(),model = 'clock',",
                    "lambda = ",as.numeric(input$lambdaChronosDiverDT),",",
                    "calibration = makeCal,",",",
                    "control = controlsCal","\n"), sep="")
        }else{
          
          cat(paste("makeCal <- makeChronosCalib(phy = tree,",
                    "node = tab1[,1],",
                    "age.min = tab1[,2] ",
                    "age.max = tab1[,3]",
                    "interactive = F,",
                    "soft.bounds = F)","\n"), sep="")
          
          cat(paste("controlsCal <- chronos.control(tol =", as.numeric(DPDiverModVals$tolCal),",",
                    "iter.max = ",as.numeric(DPDiverModVals$itermaxCal),",",
                    "eval.max =", as.numeric(DPDiverModVals$evalmax),",",
                    "nb.rate.cat = 10",
                    "epsilon =", as.numeric(DPDiverModVals$epsilonCal),")","\n"), sep="")
          
          cat(paste("tree2 <- chronos(Treediver(),model =", input$ModelsCalDiverMod, ",",
                    "lambda = ",as.numeric(input$lambdaChronosDiverDT),",",
                    "calibration = makeCal,",",",
                    "control = controlsCal","\n"), sep="")
          
        }}
      
      cat("``` \n", sep="")
      
      cat("\n", sep="")
      cat("\n", sep="")
    }
    
    
    
    
    #end of R code print
  })
  
  # end of the server function
}

# Run the application 
shinyApp(ui = ui, server = server)


